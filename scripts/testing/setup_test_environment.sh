#!/bin/bash

# SAMO Testing Environment Setup Script
# This script helps configure the testing environment with the correct API URL

echo "ðŸ”§ SAMO Testing Environment Setup"
echo "=================================="

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Check if we're in the right directory
if [ ! -f "pyproject.toml" ]; then
    print_warning "Please run this script from the SAMO--DL project root directory"
    exit 1
fi

print_info "Setting up testing environment..."

# Get the current API URL from environment or prompt user
CURRENT_URL="${API_BASE_URL:-${CLOUD_RUN_API_URL:-${MODEL_API_BASE_URL}}}"

if [ -n "$CURRENT_URL" ]; then
    print_info "Current API URL: $CURRENT_URL"
    read -p "Do you want to use this URL? (y/n): " use_current
    if [[ $use_current =~ ^[Yy]$ ]]; then
        API_URL="$CURRENT_URL"
    else
        API_URL=""
    fi
else
    API_URL=""
fi

# If no URL is set, prompt user for one
if [ -z "$API_URL" ]; then
    echo ""
    print_info "Available API endpoints:"
    echo "1. Minimal API (Production): https://samo-emotion-api-minimal-71517823771.us-central1.run.app"
    echo "2. Optimized API (Staging): https://samo-emotion-api-optimized-secure-71517823771.us-central1.run.app"
    echo "3. Custom URL (enter manually)"
    echo ""

    read -p "Select API endpoint (1-3): " choice

    case $choice in
        1)
            API_URL="https://samo-emotion-api-minimal-71517823771.us-central1.run.app"
            ;;
        2)
            API_URL="https://samo-emotion-api-optimized-secure-71517823771.us-central1.run.app"
            ;;
        3)
            read -p "Enter custom API URL: " API_URL
            ;;
        *)
            print_warning "Invalid choice. Using minimal API."
            API_URL="https://samo-emotion-api-minimal-71517823771.us-central1.run.app"
            ;;
    esac
fi

# Validate URL format
if [[ ! "$API_URL" =~ ^https?:// ]]; then
    print_warning "Invalid URL format. Adding https:// prefix."
    API_URL="https://$API_URL"
fi

# Set environment variables
export API_BASE_URL="$API_URL"
export CLOUD_RUN_API_URL="$API_URL"
export MODEL_API_BASE_URL="$API_URL"

print_success "API URL set to: $API_URL"

# Create .env file for persistent configuration
ENV_FILE="scripts/testing/.env"
mkdir -p "$(dirname "$ENV_FILE")"

cat > "$ENV_FILE" << EOF
# SAMO Testing Environment Configuration
# Generated by setup_test_environment.sh

# API Configuration
API_BASE_URL=$API_URL
CLOUD_RUN_API_URL=$API_URL
MODEL_API_BASE_URL=$API_URL

# Testing Configuration
REQUEST_TIMEOUT=30
RATE_LIMIT_REQUESTS=10

# Optional: API Key for authentication
# API_KEY=your-api-key-here
EOF

print_success "Environment configuration saved to: $ENV_FILE"

# Test the configuration
print_info "Testing configuration..."
cd scripts/testing

if python -c "
import os
os.environ['API_BASE_URL'] = '$API_URL'
from test_config import create_test_config
config = create_test_config()
print(f'âœ… Configuration test successful: {config.base_url}')
" 2>/dev/null; then
    print_success "Configuration test passed!"
else
    print_warning "Configuration test failed. Please check the URL."
fi

echo ""
print_success "Testing environment setup complete!"
echo ""
print_info "To use this configuration:"
echo "1. Source the environment file: source scripts/testing/.env"
echo "2. Or set environment variables manually:"
echo "   export API_BASE_URL=\"$API_URL\""
echo ""
print_info "To run tests:"
echo "  python scripts/testing/test_cloud_run_api_endpoints.py"
echo "  python scripts/testing/check_model_health.py"
echo "  python scripts/testing/test_model_status.py"
echo ""
print_info "Or with custom URL:"
echo "  python scripts/testing/test_cloud_run_api_endpoints.py --base-url \"$API_URL\""
