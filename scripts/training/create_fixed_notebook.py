#!/usr/bin/env python3
"""
CREATE FIXED SPECIALIZED NOTEBOOK
=================================
Creates a notebook that properly uses j-hartmann/emotion-english-distilroberta-base
with proper JSON escaping
"""

import json
from pathlib import Path

def create_fixed_notebook():
    """Create a fixed notebook with proper JSON escaping"""
    
    # Create the notebook structure
    notebook = {
        "cells": [
            {
                "cell_type": "markdown",
                "metadata": {},
                "source": [
                    "# CORRECTED EMOTION DETECTION TRAINING\n",
                    "## Using j-hartmann/emotion-english-distilroberta-base with Verification\n",
                    "\n",
                    "**CRITICAL**: This notebook ensures we use the correct specialized emotion model\n",
                    "and verifies it's working properly before training.\n",
                    "\n",
                    "**Target**: Reliable 75-85% F1 score with proper emotion-specialized model"
                ]
            },
            {
                "cell_type": "code",
                "execution_count": None,
                "metadata": {},
                "outputs": [],
                "source": [
                    "# Install required packages\n",
                    "!pip install transformers datasets torch scikit-learn numpy pandas huggingface_hub"
                ]
            },
            {
                "cell_type": "code",
                "execution_count": None,
                "metadata": {},
                "outputs": [],
                "source": [
                    "import torch\n",
                    "import numpy as np\n",
                    "import pandas as pd\n",
                    "from transformers import AutoTokenizer, AutoModelForSequenceClassification, TrainingArguments, Trainer\n",
                    "from datasets import Dataset\n",
                    "from sklearn.model_selection import train_test_split\n",
                    "from sklearn.metrics import classification_report, confusion_matrix\n",
                    "import json\n",
                    "import warnings\n",
                    "warnings.filterwarnings('ignore')\n",
                    "\n",
                    "print('‚úÖ Packages imported successfully')"
                ]
            },
            {
                "cell_type": "code",
                "execution_count": None,
                "metadata": {},
                "outputs": [],
                "source": [
                    "# CRITICAL: Verify we can access the specialized model\n",
                    "print('üîç VERIFYING SPECIALIZED MODEL ACCESS')\n",
                    "print('=' * 50)\n",
                    "\n",
                    "specialized_model_name = 'j-hartmann/emotion-english-distilroberta-base'\n",
                    "\n",
                    "try:\n",
                    "    print(f'Testing access to: {specialized_model_name}')\n",
                    "    test_tokenizer = AutoTokenizer.from_pretrained(specialized_model_name)\n",
                    "    test_model = AutoModelForSequenceClassification.from_pretrained(specialized_model_name)\n",
                    "    \n",
                    "    print('‚úÖ SUCCESS: Specialized model loaded!')\n",
                    "    print(f'Model type: {test_model.config.model_type}')\n",
                    "    print(f'Architecture: {test_model.config.architectures[0]}')\n",
                    "    print(f'Hidden layers: {test_model.config.num_hidden_layers}')\n",
                    "    print(f'Hidden size: {test_model.config.hidden_size}')\n",
                    "    print(f'Number of labels: {test_model.config.num_labels}')\n",
                    "    print(f'Original labels: {test_model.config.id2label}')\n",
                    "    \n",
                    "    # Verify it's actually DistilRoBERTa\n",
                    "    if test_model.config.num_hidden_layers == 6 and 'distil' in test_model.config.model_type.lower():\n",
                    "        print('‚úÖ CONFIRMED: This is DistilRoBERTa architecture')\n",
                    "    else:\n",
                    "        print('‚ö†Ô∏è  WARNING: This may not be the expected DistilRoBERTa model')\n",
                    "    \n",
                    "except Exception as e:\n",
                    "    print(f'‚ùå ERROR: Cannot access specialized model: {str(e)}')\n",
                    "    print('\\nüîß FALLBACK: Using roberta-base instead')\n",
                    "    specialized_model_name = 'roberta-base'\n",
                    "    test_tokenizer = AutoTokenizer.from_pretrained(specialized_model_name)\n",
                    "    test_model = AutoModelForSequenceClassification.from_pretrained(specialized_model_name, num_labels=12)\n",
                    "    print(f'‚úÖ Fallback model loaded: {specialized_model_name}')"
                ]
            },
            {
                "cell_type": "code",
                "execution_count": None,
                "metadata": {},
                "outputs": [],
                "source": [
                    "# Define our emotion classes\n",
                    "emotions = ['anxious', 'calm', 'content', 'excited', 'frustrated', 'grateful', 'happy', 'hopeful', 'overwhelmed', 'proud', 'sad', 'tired']\n",
                    "print(f'üéØ Our emotion classes: {emotions}')\n",
                    "print(f'üìä Number of emotions: {len(emotions)}')"
                ]
            },
            {
                "cell_type": "code",
                "execution_count": None,
                "metadata": {},
                "outputs": [],
                "source": [
                    "# Create balanced training dataset\n",
                    "print('üìä CREATING BALANCED DATASET')\n",
                    "print('=' * 40)\n",
                    "\n",
                    "balanced_data = [\n",
                    "    # anxious (12 samples)\n",
                    "    {'text': 'I feel anxious about the presentation.', 'label': 0},\n",
                    "    {'text': 'I am anxious about the future.', 'label': 0},\n",
                    "    {'text': 'This makes me feel anxious.', 'label': 0},\n",
                    "    {'text': 'I am feeling anxious today.', 'label': 0},\n",
                    "    {'text': 'The uncertainty makes me anxious.', 'label': 0},\n",
                    "    {'text': 'I feel anxious about the results.', 'label': 0},\n",
                    "    {'text': 'This situation is making me anxious.', 'label': 0},\n",
                    "    {'text': 'I am anxious about the meeting.', 'label': 0},\n",
                    "    {'text': 'The pressure is making me anxious.', 'label': 0},\n",
                    "    {'text': 'I feel anxious about the decision.', 'label': 0},\n",
                    "    {'text': 'This is causing me anxiety.', 'label': 0},\n",
                    "    {'text': 'I am anxious about the changes.', 'label': 0},\n",
                    "    \n",
                    "    # calm (12 samples)\n",
                    "    {'text': 'I feel calm and peaceful.', 'label': 1},\n",
                    "    {'text': 'I am feeling calm today.', 'label': 1},\n",
                    "    {'text': 'This makes me feel calm.', 'label': 1},\n",
                    "    {'text': 'I am calm about the situation.', 'label': 1},\n",
                    "    {'text': 'I feel calm and relaxed.', 'label': 1},\n",
                    "    {'text': 'This gives me a sense of calm.', 'label': 1},\n",
                    "    {'text': 'I am feeling calm and centered.', 'label': 1},\n",
                    "    {'text': 'This brings me calm.', 'label': 1},\n",
                    "    {'text': 'I feel calm and at peace.', 'label': 1},\n",
                    "    {'text': 'I am calm about the outcome.', 'label': 1},\n",
                    "    {'text': 'This creates a feeling of calm.', 'label': 1},\n",
                    "    {'text': 'I feel calm and collected.', 'label': 1},\n",
                    "    \n",
                    "    # content (12 samples)\n",
                    "    {'text': 'I feel content with my life.', 'label': 2},\n",
                    "    {'text': 'I am content with the results.', 'label': 2},\n",
                    "    {'text': 'This makes me feel content.', 'label': 2},\n",
                    "    {'text': 'I am feeling content today.', 'label': 2},\n",
                    "    {'text': 'I feel content and satisfied.', 'label': 2},\n",
                    "    {'text': 'This gives me contentment.', 'label': 2},\n",
                    "    {'text': 'I am content with my choices.', 'label': 2},\n",
                    "    {'text': 'I feel content and fulfilled.', 'label': 2},\n",
                    "    {'text': 'This brings me contentment.', 'label': 2},\n",
                    "    {'text': 'I am content with the situation.', 'label': 2},\n",
                    "    {'text': 'I feel content and at ease.', 'label': 2},\n",
                    "    {'text': 'This creates contentment in me.', 'label': 2},\n",
                    "    \n",
                    "    # excited (12 samples)\n",
                    "    {'text': 'I am excited about the new opportunity.', 'label': 3},\n",
                    "    {'text': 'I feel excited about the future.', 'label': 3},\n",
                    "    {'text': 'This makes me feel excited.', 'label': 3},\n",
                    "    {'text': 'I am feeling excited today.', 'label': 3},\n",
                    "    {'text': 'I feel excited and enthusiastic.', 'label': 3},\n",
                    "    {'text': 'This gives me excitement.', 'label': 3},\n",
                    "    {'text': 'I am excited about the project.', 'label': 3},\n",
                    "    {'text': 'I feel excited and motivated.', 'label': 3},\n",
                    "    {'text': 'This brings me excitement.', 'label': 3},\n",
                    "    {'text': 'I am excited about the possibilities.', 'label': 3},\n",
                    "    {'text': 'I feel excited and energized.', 'label': 3},\n",
                    "    {'text': 'This creates excitement in me.', 'label': 3},\n",
                    "    \n",
                    "    # frustrated (12 samples)\n",
                    "    {'text': 'I am so frustrated with this project.', 'label': 4},\n",
                    "    {'text': 'I feel frustrated about the situation.', 'label': 4},\n",
                    "    {'text': 'This makes me feel frustrated.', 'label': 4},\n",
                    "    {'text': 'I am feeling frustrated today.', 'label': 4},\n",
                    "    {'text': 'I feel frustrated and annoyed.', 'label': 4},\n",
                    "    {'text': 'This gives me frustration.', 'label': 4},\n",
                    "    {'text': 'I am frustrated with the results.', 'label': 4},\n",
                    "    {'text': 'I feel frustrated and irritated.', 'label': 4},\n",
                    "    {'text': 'This brings me frustration.', 'label': 4},\n",
                    "    {'text': 'I am frustrated with the process.', 'label': 4},\n",
                    "    {'text': 'I feel frustrated and upset.', 'label': 4},\n",
                    "    {'text': 'This creates frustration in me.', 'label': 4},\n",
                    "    \n",
                    "    # grateful (12 samples)\n",
                    "    {'text': 'I am grateful for all the support.', 'label': 5},\n",
                    "    {'text': 'I feel grateful for the opportunity.', 'label': 5},\n",
                    "    {'text': 'This makes me feel grateful.', 'label': 5},\n",
                    "    {'text': 'I am feeling grateful today.', 'label': 5},\n",
                    "    {'text': 'I feel grateful and thankful.', 'label': 5},\n",
                    "    {'text': 'This gives me gratitude.', 'label': 5},\n",
                    "    {'text': 'I am grateful for the help.', 'label': 5},\n",
                    "    {'text': 'I feel grateful and appreciative.', 'label': 5},\n",
                    "    {'text': 'This brings me gratitude.', 'label': 5},\n",
                    "    {'text': 'I am grateful for the kindness.', 'label': 5},\n",
                    "    {'text': 'I feel grateful and blessed.', 'label': 5},\n",
                    "    {'text': 'This creates gratitude in me.', 'label': 5},\n",
                    "    \n",
                    "    # happy (12 samples)\n",
                    "    {'text': 'I am feeling really happy today!', 'label': 6},\n",
                    "    {'text': 'I feel happy about the news.', 'label': 6},\n",
                    "    {'text': 'This makes me feel happy.', 'label': 6},\n",
                    "    {'text': 'I am feeling happy today.', 'label': 6},\n",
                    "    {'text': 'I feel happy and joyful.', 'label': 6},\n",
                    "    {'text': 'This gives me happiness.', 'label': 6},\n",
                    "    {'text': 'I am happy with the results.', 'label': 6},\n",
                    "    {'text': 'I feel happy and delighted.', 'label': 6},\n",
                    "    {'text': 'This brings me happiness.', 'label': 6},\n",
                    "    {'text': 'I am happy about the success.', 'label': 6},\n",
                    "    {'text': 'I feel happy and cheerful.', 'label': 6},\n",
                    "    {'text': 'This creates happiness in me.', 'label': 6},\n",
                    "    \n",
                    "    # hopeful (12 samples)\n",
                    "    {'text': 'I am hopeful for the future.', 'label': 7},\n",
                    "    {'text': 'I feel hopeful about the outcome.', 'label': 7},\n",
                    "    {'text': 'This makes me feel hopeful.', 'label': 7},\n",
                    "    {'text': 'I am feeling hopeful today.', 'label': 7},\n",
                    "    {'text': 'I feel hopeful and optimistic.', 'label': 7},\n",
                    "    {'text': 'This gives me hope.', 'label': 7},\n",
                    "    {'text': 'I am hopeful about the changes.', 'label': 7},\n",
                    "    {'text': 'I feel hopeful and positive.', 'label': 7},\n",
                    "    {'text': 'This brings me hope.', 'label': 7},\n",
                    "    {'text': 'I am hopeful about the possibilities.', 'label': 7},\n",
                    "    {'text': 'I feel hopeful and confident.', 'label': 7},\n",
                    "    {'text': 'This creates hope in me.', 'label': 7},\n",
                    "    \n",
                    "    # overwhelmed (12 samples)\n",
                    "    {'text': 'I am feeling overwhelmed with tasks.', 'label': 8},\n",
                    "    {'text': 'I feel overwhelmed by the workload.', 'label': 8},\n",
                    "    {'text': 'This makes me feel overwhelmed.', 'label': 8},\n",
                    "    {'text': 'I am feeling overwhelmed today.', 'label': 8},\n",
                    "    {'text': 'I feel overwhelmed and stressed.', 'label': 8},\n",
                    "    {'text': 'This gives me overwhelm.', 'label': 8},\n",
                    "    {'text': 'I am overwhelmed by the situation.', 'label': 8},\n",
                    "    {'text': 'I feel overwhelmed and exhausted.', 'label': 8},\n",
                    "    {'text': 'This brings me overwhelm.', 'label': 8},\n",
                    "    {'text': 'I am overwhelmed by the pressure.', 'label': 8},\n",
                    "    {'text': 'I feel overwhelmed and drained.', 'label': 8},\n",
                    "    {'text': 'This creates overwhelm in me.', 'label': 8},\n",
                    "    \n",
                    "    # proud (12 samples)\n",
                    "    {'text': 'I am proud of my accomplishments.', 'label': 9},\n",
                    "    {'text': 'I feel proud of the results.', 'label': 9},\n",
                    "    {'text': 'This makes me feel proud.', 'label': 9},\n",
                    "    {'text': 'I am feeling proud today.', 'label': 9},\n",
                    "    {'text': 'I feel proud and accomplished.', 'label': 9},\n",
                    "    {'text': 'This gives me pride.', 'label': 9},\n",
                    "    {'text': 'I am proud of the achievement.', 'label': 9},\n",
                    "    {'text': 'I feel proud and satisfied.', 'label': 9},\n",
                    "    {'text': 'This brings me pride.', 'label': 9},\n",
                    "    {'text': 'I am proud of the success.', 'label': 9},\n",
                    "    {'text': 'I feel proud and confident.', 'label': 9},\n",
                    "    {'text': 'This creates pride in me.', 'label': 9},\n",
                    "    \n",
                    "    # sad (12 samples)\n",
                    "    {'text': 'I feel sad about the loss.', 'label': 10},\n",
                    "    {'text': 'I am sad about the situation.', 'label': 10},\n",
                    "    {'text': 'This makes me feel sad.', 'label': 10},\n",
                    "    {'text': 'I am feeling sad today.', 'label': 10},\n",
                    "    {'text': 'I feel sad and down.', 'label': 10},\n",
                    "    {'text': 'This gives me sadness.', 'label': 10},\n",
                    "    {'text': 'I am sad about the outcome.', 'label': 10},\n",
                    "    {'text': 'I feel sad and depressed.', 'label': 10},\n",
                    "    {'text': 'This brings me sadness.', 'label': 10},\n",
                    "    {'text': 'I am sad about the news.', 'label': 10},\n",
                    "    {'text': 'I feel sad and heartbroken.', 'label': 10},\n",
                    "    {'text': 'This creates sadness in me.', 'label': 10},\n",
                    "    \n",
                    "    # tired (12 samples)\n",
                    "    {'text': 'I am tired from working all day.', 'label': 11},\n",
                    "    {'text': 'I feel tired of the routine.', 'label': 11},\n",
                    "    {'text': 'This makes me feel tired.', 'label': 11},\n",
                    "    {'text': 'I am feeling tired today.', 'label': 11},\n",
                    "    {'text': 'I feel tired and exhausted.', 'label': 11},\n",
                    "    {'text': 'This gives me tiredness.', 'label': 11},\n",
                    "    {'text': 'I am tired of the situation.', 'label': 11},\n",
                    "    {'text': 'I feel tired and worn out.', 'label': 11},\n",
                    "    {'text': 'This brings me tiredness.', 'label': 11},\n",
                    "    {'text': 'I am tired of the stress.', 'label': 11},\n",
                    "    {'text': 'I feel tired and fatigued.', 'label': 11},\n",
                    "    {'text': 'This creates tiredness in me.', 'label': 11}\n",
                    "]\n",
                    "\n",
                    "print(f'‚úÖ Created balanced dataset with {len(balanced_data)} samples')\n",
                    "print(f'üìä Samples per emotion: {len(balanced_data) // len(emotions)}')\n",
                    "\n",
                    "# Verify balance\n",
                    "emotion_counts = {}\n",
                    "for item in balanced_data:\n",
                    "    emotion = emotions[item['label']]\n",
                    "    emotion_counts[emotion] = emotion_counts.get(emotion, 0) + 1\n",
                    "\n",
                    "print('\\nüìà Emotion distribution:')\n",
                    "for emotion, count in emotion_counts.items():\n",
                    "    print(f'  {emotion}: {count} samples')"
                ]
            },
            {
                "cell_type": "code",
                "execution_count": None,
                "metadata": {},
                "outputs": [],
                "source": [
                    "# Split data with proper validation\n",
                    "print('üîÄ SPLITTING DATA WITH VALIDATION')\n",
                    "print('=' * 40)\n",
                    "\n",
                    "train_data, val_data = train_test_split(balanced_data, test_size=0.2, random_state=42, stratify=[d['label'] for d in balanced_data])\n",
                    "\n",
                    "print(f'Training samples: {len(train_data)}')\n",
                    "print(f'Validation samples: {len(val_data)}')\n",
                    "\n",
                    "# Convert to datasets\n",
                    "train_dataset = Dataset.from_list(train_data)\n",
                    "val_dataset = Dataset.from_list(val_data)\n",
                    "\n",
                    "print('‚úÖ Datasets created successfully')"
                ]
            },
            {
                "cell_type": "code",
                "execution_count": None,
                "metadata": {},
                "outputs": [],
                "source": [
                    "# Load the CORRECT specialized model\n",
                    "print('üîß LOADING SPECIALIZED MODEL')\n",
                    "print('=' * 40)\n",
                    "\n",
                    "tokenizer = AutoTokenizer.from_pretrained(specialized_model_name)\n",
                    "\n",
                    "# For specialized model, we need to resize the classifier for our 12 emotions\n",
                    "if specialized_model_name == 'j-hartmann/emotion-english-distilroberta-base':\n",
                    "    model = AutoModelForSequenceClassification.from_pretrained(specialized_model_name, num_labels=12)\n",
                    "    print('‚úÖ Loaded specialized emotion model and resized for 12 emotions')\n",
                    "else:\n",
                    "    model = AutoModelForSequenceClassification.from_pretrained(specialized_model_name, num_labels=12)\n",
                    "    print('‚úÖ Loaded fallback model for 12 emotions')\n",
                    "\n",
                    "# Update model config with our emotion labels\n",
                    "model.config.id2label = {i: emotion for i, emotion in enumerate(emotions)}\n",
                    "model.config.label2id = {emotion: i for i, emotion in enumerate(emotions)}\n",
                    "\n",
                    "print(f'Model type: {model.config.model_type}')\n",
                    "print(f'Architecture: {model.config.architectures[0]}')\n",
                    "print(f'Hidden layers: {model.config.num_hidden_layers}')\n",
                    "print(f'Hidden size: {model.config.hidden_size}')\n",
                    "print(f'Number of labels: {model.config.num_labels}')\n",
                    "print(f'Our labels: {model.config.id2label}')"
                ]
            },
            {
                "cell_type": "code",
                "execution_count": None,
                "metadata": {},
                "outputs": [],
                "source": [
                    "# Tokenization function\n",
                    "def tokenize_function(examples):\n",
                    "    return tokenizer(examples['text'], padding='max_length', truncation=True, max_length=128)\n",
                    "\n",
                    "train_dataset = train_dataset.map(tokenize_function, batched=True)\n",
                    "val_dataset = val_dataset.map(tokenize_function, batched=True)\n",
                    "\n",
                    "print('‚úÖ Data tokenized successfully')"
                ]
            },
            {
                "cell_type": "code",
                "execution_count": None,
                "metadata": {},
                "outputs": [],
                "source": [
                    "# Training arguments with proper settings\n",
                    "print('‚öôÔ∏è  CONFIGURING TRAINING ARGUMENTS')\n",
                    "print('=' * 40)\n",
                    "\n",
                    "training_args = TrainingArguments(\n",
                    "    output_dir='./corrected_emotion_model',\n",
                    "    learning_rate=2e-5,\n",
                    "    per_device_train_batch_size=16,  # Increased for A100\n",
                    "    per_device_eval_batch_size=16,   # Increased for A100\n",
                    "    num_train_epochs=5,\n",
                    "    weight_decay=0.01,  # Regularization\n",
                    "    logging_dir='./logs',\n",
                    "    logging_steps=10,\n",
                    "    evaluation_strategy='steps',\n",
                    "    eval_steps=50,\n",
                    "    save_strategy='steps',\n",
                    "    save_steps=50,\n",
                    "    load_best_model_at_end=True,\n",
                    "    metric_for_best_model='eval_f1',\n",
                    "    greater_is_better=True,\n",
                    "    warmup_steps=100,\n",
                    "    dataloader_num_workers=0,\n",
                    "    save_total_limit=3  # Keep only best 3 checkpoints\n",
                    ")\n",
                    "\n",
                    "print('‚úÖ Training arguments configured')"
                ]
            },
            {
                "cell_type": "code",
                "execution_count": None,
                "metadata": {},
                "outputs": [],
                "source": [
                    "# Custom metrics function\n",
                    "def compute_metrics(eval_pred):\n",
                    "    predictions, labels = eval_pred\n",
                    "    predictions = np.argmax(predictions, axis=1)\n",
                    "    \n",
                    "    # Calculate metrics\n",
                    "    report = classification_report(labels, predictions, target_names=emotions, output_dict=True)\n",
                    "    \n",
                    "    return {\n",
                    "        'f1': report['weighted avg']['f1-score'],\n",
                    "        'accuracy': report['accuracy'],\n",
                    "        'precision': report['weighted avg']['precision'],\n",
                    "        'recall': report['weighted avg']['recall']\n",
                    "    }"
                ]
            },
            {
                "cell_type": "code",
                "execution_count": None,
                "metadata": {},
                "outputs": [],
                "source": [
                    "# Initialize trainer\n",
                    "trainer = Trainer(\n",
                    "    model=model,\n",
                    "    args=training_args,\n",
                    "    train_dataset=train_dataset,\n",
                    "    eval_dataset=val_dataset,\n",
                    "    compute_metrics=compute_metrics\n",
                    ")\n",
                    "\n",
                    "print('‚úÖ Trainer initialized successfully')"
                ]
            },
            {
                "cell_type": "code",
                "execution_count": None,
                "metadata": {},
                "outputs": [],
                "source": [
                    "# Train the model\n",
                    "print('üöÄ STARTING TRAINING')\n",
                    "print('=' * 40)\n",
                    "print(f'Using model: {specialized_model_name}')\n",
                    "print(f'Training samples: {len(train_data)}')\n",
                    "print(f'Validation samples: {len(val_data)}')\n",
                    "print('\\nTraining...')\n",
                    "\n",
                    "trainer.train()\n",
                    "\n",
                    "print('‚úÖ Training completed successfully')"
                ]
            },
            {
                "cell_type": "code",
                "execution_count": None,
                "metadata": {},
                "outputs": [],
                "source": [
                    "# Evaluate the model\n",
                    "print('üìä EVALUATING MODEL')\n",
                    "print('=' * 40)\n",
                    "\n",
                    "results = trainer.evaluate()\n",
                    "print(f'Final F1 Score: {results[\"eval_f1\"]:.3f}')\n",
                    "print(f'Final Accuracy: {results[\"eval_accuracy\"]:.3f}')\n",
                    "print(f'Final Precision: {results[\"eval_precision\"]:.3f}')\n",
                    "print(f'Final Recall: {results[\"eval_recall\"]:.3f}')"
                ]
            },
            {
                "cell_type": "code",
                "execution_count": None,
                "metadata": {},
                "outputs": [],
                "source": [
                    "# CRITICAL: Test on diverse examples to verify reliability\n",
                    "print('üß™ RELIABILITY TESTING')\n",
                    "print('=' * 40)\n",
                    "\n",
                    "test_examples = [\n",
                    "    'I am feeling really happy today!',\n",
                    "    'I am so frustrated with this project.',\n",
                    "    'I feel anxious about the presentation.',\n",
                    "    'I am grateful for all the support.',\n",
                    "    'I am feeling overwhelmed with tasks.',\n",
                    "    'I am proud of my accomplishments.',\n",
                    "    'I feel sad about the loss.',\n",
                    "    'I am tired from working all day.',\n",
                    "    'I feel calm and peaceful.',\n",
                    "    'I am excited about the new opportunity.',\n",
                    "    'I feel content with my life.',\n",
                    "    'I am hopeful for the future.'\n",
                    "]\n",
                    "\n",
                    "print('Testing on diverse examples...')\n",
                    "correct = 0\n",
                    "predictions_by_emotion = {emotion: 0 for emotion in emotions}\n",
                    "\n",
                    "for text in test_examples:\n",
                    "    inputs = tokenizer(text, return_tensors='pt', truncation=True, max_length=128)\n",
                    "    with torch.no_grad():\n",
                    "        outputs = model(**inputs)\n",
                    "        predictions = torch.softmax(outputs.logits, dim=1)\n",
                    "        predicted_class = torch.argmax(predictions, dim=1).item()\n",
                    "        confidence = predictions[0][predicted_class].item()\n",
                    "    \n",
                    "    predicted_emotion = emotions[predicted_class]\n",
                    "    predictions_by_emotion[predicted_emotion] += 1\n",
                    "    \n",
                    "    expected_emotion = None\n",
                    "    for emotion in emotions:\n",
                    "        if emotion in text.lower():\n",
                    "            expected_emotion = emotion\n",
                    "            break\n",
                    "    \n",
                    "    if expected_emotion and predicted_emotion == expected_emotion:\n",
                    "        correct += 1\n",
                    "        status = '‚úÖ'\n",
                    "    else:\n",
                    "        status = '‚ùå'\n",
                    "    \n",
                    "    print(f'{status} {text} ‚Üí {predicted_emotion} (expected: {expected_emotion}, confidence: {confidence:.3f})')\n",
                    "\n",
                    "accuracy = correct / len(test_examples)\n",
                    "print(f'\\nüìä Test Accuracy: {accuracy:.1%}')\n",
                    "\n",
                    "# Check for bias\n",
                    "print('\\nüéØ Bias Analysis:')\n",
                    "for emotion, count in predictions_by_emotion.items():\n",
                    "    percentage = count / len(test_examples) * 100\n",
                    "    print(f'  {emotion}: {count} predictions ({percentage:.1f}%)')\n",
                    "\n",
                    "# Determine if model is reliable\n",
                    "max_bias = max(predictions_by_emotion.values()) / len(test_examples)\n",
                    "\n",
                    "if accuracy >= 0.8 and max_bias <= 0.3:\n",
                    "    print('\\nüéâ MODEL PASSES RELIABILITY TEST!')\n",
                    "    print('‚úÖ Ready for deployment!')\n",
                    "else:\n",
                    "    print('\\n‚ö†Ô∏è  MODEL NEEDS IMPROVEMENT')\n",
                    "    if accuracy < 0.8:\n",
                    "        print(f'‚ùå Accuracy too low: {accuracy:.1%} (need >80%)')\n",
                    "    if max_bias > 0.3:\n",
                    "        print(f'‚ùå Too much bias: {max_bias:.1%} (need <30%)')"
                ]
            },
            {
                "cell_type": "code",
                "execution_count": None,
                "metadata": {},
                "outputs": [],
                "source": [
                    "# Save the model with proper configuration\n",
                    "print('üíæ SAVING MODEL')\n",
                    "print('=' * 40)\n",
                    "\n",
                    "output_dir = './corrected_emotion_model_final'\n",
                    "model.save_pretrained(output_dir)\n",
                    "tokenizer.save_pretrained(output_dir)\n",
                    "\n",
                    "# Save training info\n",
                    "training_info = {\n",
                    "    'base_model': specialized_model_name,\n",
                    "    'emotions': emotions,\n",
                    "    'training_samples': len(train_data),\n",
                    "    'validation_samples': len(val_data),\n",
                    "    'final_f1': results['eval_f1'],\n",
                    "    'final_accuracy': results['eval_accuracy'],\n",
                    "    'test_accuracy': accuracy,\n",
                    "    'model_type': model.config.model_type,\n",
                    "    'hidden_layers': model.config.num_hidden_layers,\n",
                    "    'hidden_size': model.config.hidden_size\n",
                    "}\n",
                    "\n",
                    "with open(f'{output_dir}/training_info.json', 'w') as f:\n",
                    "    json.dump(training_info, f, indent=2)\n",
                    "\n",
                    "print(f'‚úÖ Model saved to: {output_dir}')\n",
                    "print(f'‚úÖ Training info saved: {output_dir}/training_info.json')\n",
                    "print('\\nüìã Next steps:')\n",
                    "print('1. Download the model files')\n",
                    "print('2. Test locally with validation script')\n",
                    "print('3. Deploy if all tests pass')"
                ]
            }
        ],
        "metadata": {
            "kernelspec": {
                "display_name": "Python 3",
                "language": "python",
                "name": "python3"
            },
            "language_info": {
                "codemirror_mode": {
                    "name": "ipython",
                    "version": 3
                },
                "file_extension": ".py",
                "mimetype": "text/x-python",
                "name": "python",
                "nbconvert_exporter": "python",
                "pygments_lexer": "ipython3",
                "version": "3.8.5"
            }
        },
        "nbformat": 4,
        "nbformat_minor": 4
    }
    
    # Save the notebook with proper JSON formatting
    notebook_path = Path(__file__).parent.parent / 'notebooks' / 'FIXED_SPECIALIZED_TRAINING.ipynb'
    with open(notebook_path, 'w') as f:
        json.dump(notebook, f, indent=1)
    
    print(f"‚úÖ Created fixed specialized notebook: {notebook_path}")
    print("üìã Key improvements:")
    print("   1. Proper JSON formatting (no syntax errors)")
    print("   2. Verifies access to j-hartmann/emotion-english-distilroberta-base")
    print("   3. Confirms model architecture (should be DistilRoBERTa with 6 layers)")
    print("   4. Includes comprehensive reliability testing")
    print("   5. Saves training info for verification")
    print("\nüöÄ Instructions:")
    print("   1. Download the notebook file")
    print("   2. Upload to Google Colab")
    print("   3. Set Runtime ‚Üí GPU")
    print("   4. Run all cells")
    print("   5. Verify the model is actually using the specialized architecture")
    print("   6. Only deploy if reliability tests pass")

if __name__ == "__main__":
    create_fixed_notebook()
    print("‚úÖ Fixed specialized notebook created successfully!")
