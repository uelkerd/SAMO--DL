[tool.ruff]
# Ruff configuration for SAMO Deep Learning Project
# Optimized for ML/Data Science workflows with production readiness

# Python version target
target-version = "py310"

# File patterns to include/exclude
include = ["*.py", "*.pyi", "*.ipynb"]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "prisma",  # Skip Prisma generated files
    ".github",  # Skip GitHub workflows
]

# Line length (compatible with black)
line-length = 88

# Enable automatic fixing for selected rules
fix = true
show-fixes = true

# Output format for CI/CD integration
output-format = "grouped"

[tool.ruff.lint]
# Rule selection optimized for ML/Data Science
select = [
    # Pyflakes - Essential error detection
    "F",
    # pycodestyle errors - Code style enforcement
    "E",  
    # pycodestyle warnings - Important formatting
    "W",
    # mccabe - Complexity checking
    "C90",
    # isort - Import sorting
    "I",
    # pep8-naming - Naming conventions
    "N",
    # pydocstyle - Documentation
    "D",
    # pyupgrade - Modern Python syntax
    "UP",
    # flake8-2020 - Python 2/3 compatibility
    "YTT",
    # flake8-annotations - Type annotations
    "ANN",
    # flake8-bandit - Security linting
    "S",
    # flake8-blind-except - Exception handling
    "BLE",
    # flake8-boolean-trap - Boolean trap detection
    "FBT",
    # flake8-bugbear - Common bugs
    "B",
    # flake8-builtins - Builtin shadowing
    "A",
    # flake8-comprehensions - List/dict comprehensions
    "C4",
    # flake8-datetimez - Datetime usage
    "DTZ",
    # flake8-debugger - Debug statements
    "T10",
    # flake8-errmsg - Error message formatting
    "EM",
    # flake8-implicit-str-concat - String concatenation
    "ISC",
    # flake8-import-conventions - Import naming
    "ICN",
    # flake8-logging-format - Logging best practices
    "G",
    # flake8-no-pep420 - Namespace packages
    "INP",
    # flake8-pie - Miscellaneous improvements
    "PIE",
    # flake8-print - Print statements
    "T20",
    # flake8-pytest-style - Pytest conventions
    "PT",
    # flake8-quotes - Quote consistency
    "Q",
    # flake8-return - Return statement improvements
    "RET",
    # flake8-simplify - Code simplification
    "SIM",
    # flake8-tidy-imports - Import organization
    "TID",
    # flake8-unused-arguments - Unused arguments
    "ARG",
    # flake8-use-pathlib - Pathlib usage
    "PTH",
    # pandas-vet - Pandas best practices (critical for ML)
    "PD",
    # pygrep-hooks - Miscellaneous checks
    "PGH",
    # Pylint - Additional static analysis
    "PL",
    # flake8-raise - Exception raising
    "RSE",
    # Ruff-specific rules
    "RUF",
]

# Rules to ignore (ML/Data Science specific exceptions)
ignore = [
    # Documentation - Allow flexibility for rapid prototyping
    "D100",  # Missing docstring in public module
    "D101",  # Missing docstring in public class  
    "D102",  # Missing docstring in public method
    "D103",  # Missing docstring in public function
    "D104",  # Missing docstring in public package
    "D105",  # Missing docstring in magic method
    "D107",  # Missing docstring in __init__
    
    # Type annotations - Optional for research code
    "ANN001",  # Missing type annotation for function argument
    "ANN002",  # Missing type annotation for *args
    "ANN003",  # Missing type annotation for **kwargs
    "ANN201",  # Missing return type annotation for public function
    "ANN204",  # Missing return type annotation for special method
    
    # Security - ML specific exceptions
    "S101",    # Use of assert (common in ML validation)
    "S311",    # Standard pseudo-random generators (OK for non-crypto use)
    "S603",    # subprocess calls (needed for external ML tools)
    "S607",    # Partial executable paths (common in ML pipelines)
    
    # Complexity - Allow higher complexity for ML algorithms
    "C901",    # Function is too complex (ML algorithms can be complex)
    "PLR0911", # Too many return statements
    "PLR0912", # Too many branches
    "PLR0913", # Too many arguments (common in ML functions)
    "PLR0915", # Too many statements
    
    # Pandas specific - Common patterns in data science
    "PD002",   # Use of inplace=True (sometimes necessary)
    "PD011",   # Use of .values (sometimes needed for numpy interop)
    "PD013",   # Use of .stack() (valid pattern)
    
    # Print statements - Allow for development/debugging
    "T201",    # print statements (useful for ML debugging)
    
    # Boolean traps - Common in ML configuration
    "FBT002",  # Boolean default value in function definition
    "FBT003",  # Boolean positional argument in function call
    
    # Magic values - Common in ML (learning rates, etc.)
    "PLR2004", # Magic value used in comparison
    
    # Exception handling - ML specific patterns
    "BLE001",  # Blind except (sometimes needed for robust ML pipelines)
    
    # Import conventions - Flexibility for ML libraries
    "ICN001",  # Import conventions (allow various ML library imports)
]

# Allow unfixable rules for manual review
unfixable = [
    "F401",    # Unused imports (require manual verification)
    "F841",    # Unused variables (require manual verification) 
    "T201",    # Print statements (manual decision)
    "T203",    # pprint statements (manual decision)
]

[tool.ruff.lint.per-file-ignores]
# Test files - More lenient rules
"tests/**/*.py" = [
    "S101",    # Asserts are expected in tests
    "ANN",     # Type annotations less critical in tests
    "D",       # Documentation less critical in tests
    "PLR2004", # Magic values OK in tests
    "S311",    # Random generators OK in tests
]

# Jupyter notebooks - Research-friendly rules
"notebooks/**/*.ipynb" = [
    "D100",    # Missing module docstring
    "T201",    # Print statements expected in notebooks
    "F401",    # Unused imports (exploratory analysis)
    "E402",    # Module level import not at top (notebooks)
    "ANN",     # Type annotations optional in research
    "S101",    # Asserts common in data validation
    "PLR2004", # Magic values in exploratory analysis
]

# Scripts - Utility focused
"scripts/**/*.py" = [
    "T201",    # Print statements for script output
    "S602",    # Subprocess shell injection (controlled environment)
    "PLR2004", # Magic values in configuration scripts
]

# Data processing modules - More lenient on complexity
"src/data/**/*.py" = [
    "PLR0913", # Many arguments common in data processing
    "C901",    # Complex functions for data transformation
    "S608",    # SQL injection (using SQLAlchemy ORM)
]

# Model modules - ML algorithm focused
"src/models/**/*.py" = [
    "PLR0913", # Many hyperparameters
    "C901",    # Complex ML algorithms
    "S101",    # Asserts for tensor shape validation
]

[tool.ruff.lint.mccabe]
# Complexity threshold (higher for ML algorithms)
max-complexity = 15

[tool.ruff.lint.pydocstyle]
# Use Google docstring convention (popular in ML)
convention = "google"

[tool.ruff.lint.pycodestyle]
# Line length configuration (handled by black)
max-line-length = 88

[tool.ruff.lint.isort]
# Import sorting configuration (compatible with black)
combine-as-imports = true
split-on-trailing-comma = true
known-first-party = ["samo", "src"]
known-third-party = [
    "torch", 
    "transformers", 
    "datasets", 
    "numpy", 
    "pandas", 
    "sklearn", 
    "sqlalchemy",
    "fastapi",
    "pydantic",
    "openai"
]

[tool.ruff.lint.flake8-quotes]
# Quote style (compatible with black)
inline-quotes = "double"
multiline-quotes = "double"

[tool.ruff.lint.flake8-import-conventions.aliases]
# Standard ML library aliases
numpy = "np"
pandas = "pd"
matplotlib = "mpl"
"matplotlib.pyplot" = "plt"
seaborn = "sns"
sklearn = "sk"
torch = "torch"
"transformers" = "transformers"
"datasets" = "datasets"

[tool.ruff.format]
# Formatting options (defer to black for consistency)
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.ruff.lint.pylint]
# Pylint specific configuration
max-args = 8  # Higher for ML functions
max-branches = 15  # Higher for complex algorithms
max-returns = 8   # Higher for ML validation functions
max-statements = 60  # Higher for data processing

[tool.ruff.lint.flake8-annotations]
# Type annotation configuration
allow-star-arg-any = true
ignore-fully-untyped = true  # Allow gradual typing adoption

# Black configuration (existing, maintained for reference)
[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | prisma
)/
''' 