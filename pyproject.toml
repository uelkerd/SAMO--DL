[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "samo-dl"
version = "0.1.0"
description = "SAMO Deep Learning - AI Models for Voice-First Emotional Journaling"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "SAMO Deep Learning Team", email = "ai@samo-app.com"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["ai", "machine-learning", "nlp", "emotion-detection", "voice-processing"]
dependencies = [
    "torch>=2.0.0",
    "transformers>=4.35.0",
    "datasets>=2.14.0",
    "scikit-learn>=1.3.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "pydantic>=2.4.0",
    "python-multipart>=0.0.6",
    "sqlalchemy>=2.0.0",
    "asyncpg>=0.29.0",
    "python-dotenv>=1.0.0",
    "prisma>=0.11.0",
    "openai-whisper>=20231117",
    "pydub>=0.25.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.9.0",
    "ruff>=0.1.0",
    "mypy>=1.6.0",
    "pre-commit>=3.5.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.25.0",
]
gpu = [
    "torch[cuda]>=2.0.0",
]
optimization = [
    "onnx>=1.15.0",
    "onnxruntime>=1.16.0",
    "onnxruntime-gpu>=1.16.0",
]

[project.scripts]
samo-train = "src.training.cli:main"
samo-inference = "src.inference.cli:main"

[project.urls]
Homepage = "https://github.com/samo-ai/samo-dl"
Documentation = "https://samo-dl.readthedocs.io"
Repository = "https://github.com/samo-ai/samo-dl.git"
"Bug Tracker" = "https://github.com/samo-ai/samo-dl/issues"

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings  
    "F",      # Pyflakes
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "SIM",    # flake8-simplify
    "I",      # isort
    "N",      # pep8-naming
    "C",      # flake8-comprehensions
    "PTH",    # flake8-use-pathlib
    "RUF",    # Ruff-specific rules
    "Q",      # flake8-quotes
    "T20",    # flake8-print
    "PD",     # pandas-vet
    "G",      # flake8-logging-format
    "FBT",    # flake8-boolean-trap
    "ANN",    # flake8-annotations
    "S",      # flake8-bandit
    "DTZ",    # flake8-datetimez
    "EM",     # flake8-errmsg
    "D",      # pydocstyle
    "PIE",    # flake8-pie
    "PLW",    # pylint warnings
]
ignore = [
    "E501",     # Line too long (we use formatter)
    "ANN101",   # Missing type annotation for self
    "ANN102",   # Missing type annotation for cls
    "D100",     # Missing docstring in public module
    "D101",     # Missing docstring in public class
    "D102",     # Missing docstring in public method
    "D103",     # Missing docstring in public function
    "D104",     # Missing docstring in public package
    "D105",     # Missing docstring in magic method
    "S101",     # Use of assert
    "PLW0603",  # Using global statement
]
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "data/cache",
    "models",
    "test_checkpoints",
    "*.egg-info",
]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = ["S101", "D", "ANN"]  # Allow asserts and missing docs in tests
"scripts/**/*.py" = ["T20", "S603", "S607"]  # Allow prints in scripts
"notebooks/**/*.py" = ["T20", "E402", "F401", "PLC0415"]  # Notebook-specific ignores
"**/__init__.py" = ["F401"]  # Allow unused imports in __init__.py

[tool.ruff.isort]
known-first-party = ["src"]
force-single-line = false
lines-after-imports = 2

[tool.ruff.flake8-quotes]
inline-quotes = "double"
multiline-quotes = "double"

# Bandit security configuration
[tool.bandit]
exclude_dirs = [
    "tests",
    "data/cache", 
    "models",
    "test_checkpoints",
    ".venv",
]
skips = [
    "B101",  # assert_used - we use asserts appropriately
    "B603",  # subprocess_without_shell_equals_true - needed for scripts
    "B607",  # start_process_with_partial_path - needed for scripts
]

# Test configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "gpu: marks tests that require GPU",
]

# Type checking configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Gradual typing
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "transformers.*",
    "datasets.*", 
    "torch.*",
    "sklearn.*",
    "pandas.*",
    "numpy.*",
    "whisper.*",
    "pydub.*",
]
ignore_missing_imports = true
