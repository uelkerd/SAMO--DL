[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "samo-dl"
version = "0.1.0"
description = "SAMO Deep Learning - AI-powered voice-first journaling companion"
authors = [
    {name = "SAMO DL Team", email = "dev@samo.ai"}
]
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core ML/AI Dependencies
    "torch>=2.0.0",
    "transformers>=4.30.0",
    "datasets>=2.14.0",
    "accelerate>=0.20.0",
    "onnxruntime>=1.15.0",

    # Deep Learning Frameworks
    "scikit-learn>=1.3.0",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "scipy>=1.11.0",

    # Text Processing
    "nltk>=3.8",
    "spacy>=3.6.0",
    "gensim>=4.3.0",
    "textblob>=0.17.0",

    # Audio Processing
    "librosa>=0.10.0",
    "soundfile>=0.12.0",
    "pyaudio>=0.2.11",

    # API Framework
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.23.0",
    "python-multipart>=0.0.6",
    "pydantic>=2.0.0",

    # Database & Storage
    "sqlalchemy>=2.0.0",
    "psycopg2-binary>=2.9.0",
    "redis>=4.6.0",

    # Utilities
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0",
    "requests>=2.31.0",
    "click>=8.1.0",
    "rich>=13.0.0",
    "loguru>=0.7.0",

    # Development Tools - moved to optional dependencies
]

[project.optional-dependencies]
# Test Dependencies
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "pytest-mock>=3.11.0",
    "pytest-asyncio>=0.21.0",
    "pytest-timeout>=2.1.0",
    "pytest-benchmark>=4.0.0",
    "httpx>=0.24.0",  # For FastAPI testing
    "coverage[toml]>=7.2.0",
    "factory-boy>=3.3.0",  # For test data generation
]

# Development Dependencies
dev = [
    "ruff>=0.0.280",
    "black>=23.7.0",
    "mypy>=1.5.0",
    "bandit[toml]>=1.7.5",
    "safety>=2.3.0",
    "pre-commit>=3.3.0",
    "jupyterlab>=4.0.0",
    "ipykernel>=6.25.0",
]

# Production Dependencies
prod = [
    "gunicorn>=21.2.0",
    "prometheus-client>=0.17.0",
    "sentry-sdk[fastapi]>=1.29.0",
]

# All dependencies for development
all = [
    "samo-dl[test,dev,prod]"
]

[project.urls]
"Homepage" = "https://github.com/samo-ai/samo-dl"
"Bug Reports" = "https://github.com/samo-ai/samo-dl/issues"
"Source" = "https://github.com/samo-ai/samo-dl"

[project.scripts]
samo-train = "src.training.cli:main"
samo-api = "src.unified_ai_api:main"

# ============================================================================
# TOOL CONFIGURATIONS
# ============================================================================

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

# Ruff Configuration (Linting & Formatting)
[tool.ruff]
target-version = "py39"
line-length = 100
indent-width = 4

# Include/exclude patterns
include = ["*.py", "*.pyi"]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "data/cache",
    "models/*/cache",
    "test_checkpoints",
]

[tool.ruff.lint]
# Enable rule categories
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PL",  # pylint
    "NPY", # NumPy-specific rules
    "RUF", # Ruff-specific rules
    "S",   # flake8-bandit (security)
    "G",   # flake8-logging-format
    "T20", # flake8-print
    "ANN", # flake8-annotations
    "ARG", # flake8-unused-arguments
    "D",   # pydocstyle
    "DTZ", # flake8-datetimez
]

# Disable specific rules that conflict or are too strict
ignore = [
    "E501",   # Line too long (handled by formatter)
    "D100",   # Missing docstring in public module (too strict for all modules)
    "D102",   # Missing docstring in public method (too strict for all methods)
    "D103",   # Missing docstring in public function (too strict for all functions)
    "D104",   # Missing docstring in public package (too strict for all packages)
    "D105",   # Missing docstring in magic method
    "D106",   # Missing docstring in public nested class
    "D107",   # Missing docstring in __init__ (too strict for all constructors)
    "D203",   # One blank line before class (conflicts with D211)
    "D213",   # Multi-line summary second line (conflicts with D212)
    "S101",   # Use of assert (common in tests)
    "G004",   # Logging f-string (acceptable for performance)
    "S607",   # Starting process with partial path (acceptable for development)
    "S603",   # Subprocess call (acceptable for development scripts)
    "PLR2004", # Magic numbers (too strict for ML constants)
    "PLR0913", # Too many arguments (acceptable for ML functions)
    "PLR0915", # Too many statements (acceptable for complex functions)
    "PD901",   # Generic DataFrame names (acceptable for data processing)
    "PLC0415", # Import at top-level (acceptable for conditional imports)
    "PTH123",  # Pathlib usage (acceptable for file operations)
    "PTH120",  # Pathlib usage (acceptable for file operations)
    "PTH108",  # Pathlib usage (acceptable for file operations)
    "SIM115",  # Context manager (acceptable for simple file operations)
    "B008",    # Function call in defaults (acceptable for FastAPI)
    "ARG001",  # Unused arguments (acceptable for FastAPI handlers)
    "ARG002",  # Unused method arguments (acceptable for overrides)
    "RUF012",  # Mutable class attributes (acceptable for ML models)
    "PLE1205", # Logging format (acceptable for development)
    "ERA001",  # Commented code (acceptable for development)
    "W293",    # Blank line whitespace (acceptable)
    "SIM102",  # Nested if statements (acceptable for complex logic)
    "B904",    # Exception chaining (acceptable for development)
    "ANN201",  # Missing return type annotations (too strict for all functions)
    "ANN001",  # Missing type annotations (too strict for all arguments)
    "ANN003",  # Missing type annotations (too strict for kwargs)
    "ANN202",  # Missing return type annotations (too strict for private functions)
    "ANN204",  # Missing return type annotations (too strict for special methods)
    "I001",    # Import sorting (acceptable)
    "UP035",   # Import from collections.abc (acceptable)
    "PLW0603", # Global statement (acceptable for model caching)
]

# Per-file ignores
[tool.ruff.lint.per-file-ignores]
"tests/**" = [
    "S101",   # Allow assert in tests
    "ANN",    # Don't require type annotations in tests
    "D",      # Don't require docstrings in tests
]
"scripts/**" = [
    "T20",    # Allow print statements in scripts
    "ANN",    # Don't require type annotations in scripts
]
"src/data/sample_data.py" = [
    "S311",   # Allow random for sample data generation
]

[tool.ruff.lint.pydocstyle]
convention = "google"  # Use Google docstring style

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# MyPy Configuration (Type Checking)
[tool.mypy]
python_version = "3.9"
warn_return_any = false  # Too strict for ML code
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false  # Too strict for FastAPI
no_implicit_optional = false  # Too strict for Python 3.9
warn_redundant_casts = false  # Too strict for ML code
warn_unused_ignores = false  # Too strict for development
warn_no_return = false  # Too strict for ML code
warn_unreachable = false  # Too strict for ML code
strict_equality = false  # Too strict for ML code

# Ignore missing imports for third-party packages
[[tool.mypy.overrides]]
module = [
    "transformers.*",
    "datasets.*",
    "torch.*",
    "numpy.*",
    "pandas.*",
    "sklearn.*",
    "librosa.*",
    "soundfile.*",
    "whisper.*",
    "gensim.*",
    "nltk.*",
    "spacy.*",
    "textblob.*",
]
ignore_missing_imports = true

# Pytest Configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "-q",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=70",
    "--tb=short",
]

testpaths = ["tests"]

python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Test markers
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests that require GPU",
    "integration: marks integration tests",
    "e2e: marks end-to-end tests",
    "model: marks tests that load ML models",
    "network: marks tests that require network access",
]

# Filter warnings
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::FutureWarning",
]

# Coverage Configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/site-packages/*",
    "setup.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.xml]
output = "coverage.xml"

[tool.coverage.html]
directory = "htmlcov"

# Bandit Configuration (Security)
[tool.bandit]
exclude_dirs = ["tests", "test_*", "*_test.py"]
skips = [
    "B101",  # assert_used - acceptable in tests
    "B311",  # random - acceptable for sample data generation
    "B404",  # subprocess import - acceptable for development
    "B603",  # subprocess_without_shell_equals_true - acceptable for trusted input
    "B607",  # start_process_with_partial_path - acceptable in controlled environments
    "B614",  # pytorch_load_save - acceptable for ML model persistence
    "B615",  # huggingface_unsafe_download - acceptable for development
]

# Safety Configuration (Dependency Vulnerability Scanning)
[tool.safety]
# Ignore specific vulnerabilities if needed
# ignore = ["12345"]

# Black Configuration (Code Formatting) - Fallback if Ruff format not used
[tool.black]
target-version = ['py39']
line-length = 100
skip-string-normalization = false
skip-magic-trailing-comma = false
