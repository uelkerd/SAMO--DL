# FORTRESS MODE: Code Quality Enforcement for New Code Only
# Prevents monster PRs and enforces quality only on src/quality_enforced/
#
# APPROACH:
# - Basic quality checks (whitespace, syntax, etc.) run on ALL files
# - Advanced quality tools (ruff, mypy, bandit) run ONLY on src/quality_enforced/
# - Configuration files, scripts, and docs get basic checks but not strict linting

repos:
  # Circuit breaker - Kill monster PRs
  - repo: local
    hooks:
      - id: fortress-guard
        name: "üè∞ Fortress Guard - Max 5 files per PR"
        entry: python scripts/fortress-guard.py
        language: python
        pass_filenames: false
        always_run: true

  # Basic pre-commit hooks (run on all files)
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        name: "Trim trailing whitespace (all files)"
      - id: end-of-file-fixer
        name: "Ensure files end with newline (all files)"
      - id: check-yaml
        name: "Check YAML syntax (all files)"
        files: \.(yaml|yml)$
      - id: check-json
        name: "Check JSON syntax (all files)"
        files: \.json$
      - id: check-merge-conflict
        name: "Check for merge conflict markers (all files)"
      - id: check-case-conflict
        name: "Check for case conflicts (all files)"
      - id: check-docstring-first
        name: "Check docstring placement (Python files)"
        files: \.py$
      - id: check-executables-have-shebangs
        name: "Check executable files have shebangs (all files)"
      - id: debug-statements
        name: "Check for debug statements (Python files)"
        files: \.py$
      - id: name-tests-test
        name: "Check test file naming (all files)"
      - id: requirements-txt-fixer
        name: "Fix requirements.txt (all files)"
        files: requirements.*\.txt$
      - id: fix-byte-order-marker
        name: "Fix byte order markers (all files)"
      - id: mixed-line-ending
        name: "Fix mixed line endings (all files)"
      - id: check-ast
        name: "Check Python AST (Python files)"
        files: \.py$
      - id: check-added-large-files
        name: "Check for large files (all files)"

  # Shell script quality (run on all shell scripts)
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.10.0.1
    hooks:
      - id: shellcheck
        name: "Shell script linting (all shell scripts)"
        files: \.(sh|bash)$

  # Markdown formatting with Prettier
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        name: "Prettier markdown formatting (all markdown files)"
        files: \.md$
        args: [--prose-wrap=always, --print-width=88]

  # Quality tools - ONLY for quality_enforced/
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.6.8
    hooks:
      - id: ruff
        name: "Ruff linting (fortress zone only)"
        args: [--fix, --exit-non-zero-on-fix]
        files: ^src/quality_enforced/.*\.py$
      - id: ruff-format
        name: "Ruff formatting (fortress zone only)"
        files: ^src/quality_enforced/.*\.py$

  # Type checking with MyPy (fortress zone only)
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.17.1
    hooks:
      - id: mypy
        name: "MyPy type checking (fortress zone only)"
        args: [--ignore-missing-imports, --python-version=3.9]
        files: ^src/quality_enforced/.*\.py$
        additional_dependencies: [types-requests, types-PyYAML]

  # Security scanning with Bandit (fortress zone only)
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.6
    hooks:
      - id: bandit
        name: "Bandit security scan (fortress zone only)"
        files: ^src/quality_enforced/.*\.py$

# Global configuration
default_language_version:
  python: python3.9
