# Comprehensive Code Quality Prevention System for SAMO-DL
# This configuration prevents ALL recurring DeepSource issues from ever happening again

repos:
  # Basic pre-commit hooks (run first)
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-json
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-docstring-first
      - id: check-executables-have-shebangs
      - id: debug-statements
      - id: name-tests-test
      - id: requirements-txt-fixer
      - id: fix-byte-order-marker
      - id: mixed-line-ending
      - id: check-ast

  # Python formatting and linting (in order)
  - repo: https://github.com/psf/black
    rev: 24.2.0
    hooks:
      - id: black
        language_version: python3
        args: [--line-length=88, --target-version=py38]
        types: [python]
        exclude: |
          (?x)^(
              \.git|
              \.venv|
              \.env|
              __pycache__|
              \.pytest_cache|
              \.mypy_cache|
              \.ruff_cache|
              build|
              dist|
              \.eggs|
              \.tox|
              \.coverage|
              htmlcov|
              \.cache|
              \.logs|
              results|
              samples|
              notebooks|
              website|
              docs/diagrams
          )$

  # Import sorting and organization
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: [--profile=black, --line-length=88, --py=38]
        types: [python]
        exclude: |
          (?x)^(
              \.git|
              \.venv|
              \.env|
              __pycache__|
              \.pytest_cache|
              \.mypy_cache|
              \.ruff_cache|
              build|
              dist|
              \.eggs|
              \.tox|
              \.coverage|
              htmlcov|
              \.cache|
              \.logs|
              results|
              samples|
              notebooks|
              website|
              docs/diagrams
          )$

  # Python linting with Ruff (super fast)
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.3.0
    hooks:
      - id: ruff
        args: [--fix, --exit-non-zero-on-fix]
        types: [python]
        exclude: |
          (?x)^(
              \.git|
              \.venv|
              \.env|
              __pycache__|
              \.pytest_cache|
              \.mypy_cache|
              \.ruff_cache|
              build|
              dist|
              \.eggs|
              \.tox|
              \.coverage|
              htmlcov|
              \.cache|
              \.logs|
              results|
              samples|
              notebooks|
              website|
              docs/diagrams
          )$

  # Type checking with MyPy
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        args: [--ignore-missing-imports, --python-version=3.8]
        types: [python]
        exclude: |
          (?x)^(
              \.git|
              \.venv|
              \.env|
              __pycache__|
              \.pytest_cache|
              \.mypy_cache|
              \.ruff_cache|
              build|
              dist|
              \.eggs|
              \.tox|
              \.coverage|
              htmlcov|
              \.cache|
              \.logs|
              results|
              samples|
              notebooks|
              website|
              docs/diagrams
          )$

  # Security scanning with Bandit
  # Note: Bandit now reports to stdout and fails commit if issues found
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-r, .]
        types: [python]
        exclude: |
          (?x)^(
              \.git|
              \.venv|
              \.env|
              __pycache__|
              \.pytest_cache|
              \.mypy_cache|
              \.ruff_cache|
              build|
              dist|
              \.eggs|
              \.tox|
              \.coverage|
              htmlcov|
              \.cache|
              \.logs|
              results|
              samples|
              notebooks|
              website|
              docs/diagrams
          )$

  # Security vulnerability scanning with Safety
  # Note: Consider moving this to CI/CD pipeline for performance
  # Safety checks installed dependencies and can be slow
  - repo: https://github.com/PyCQA/safety
    rev: 3.1.1
    hooks:
      - id: safety
        args: [check]

  # Documentation formatting
  - repo: https://github.com/myint/docformatter
    rev: v1.7.5
    hooks:
      - id: docformatter
        args: [--in-place, --wrap-summaries=88, --wrap-descriptions=88]
        types: [python]
        exclude: |
          (?x)^(
              \.git|
              \.venv|
              \.env|
              __pycache__|
              \.pytest_cache|
              \.mypy_cache|
              \.ruff_cache|
              build|
              dist|
              \.eggs|
              \.tox|
              \.coverage|
              htmlcov|
              \.cache|
              \.logs|
              results|
              samples|
              notebooks|
              website|
              docs/diagrams
          )$

  # String formatting with flynt
  - repo: https://github.com/ikamensh/flynt
    rev: 0.78
    hooks:
      - id: flynt
        args: [--line-length=88]
        types: [python]
        exclude: |
          (?x)^(
              \.git|
              \.venv|
              \.env|
              __pycache__|
              \.pytest_cache|
              \.mypy_cache|
              \.ruff_cache|
              build|
              dist|
              \.eggs|
              \.tox|
              \.coverage|
              htmlcov|
              \.cache|
              \.logs|
              results|
              samples|
              notebooks|
              website|
              docs/diagrams
          )$

  # Custom SAMO-DL code quality enforcer
  - repo: local
    hooks:
      - id: samo-code-quality-enforcer
        name: SAMO-DL Code Quality Enforcer
        entry: python scripts/maintenance/code_quality_enforcer.py
        language: python
        types: [python]
        pass_filenames: false
        always_run: true
        stages: commit
        exclude: |
          (?x)^(
              \.git|
              \.venv|
              \.env|
              __pycache__|
              \.pytest_cache|
              \.mypy_cache|
              \.ruff_cache|
              build|
              dist|
              \.eggs|
              \.tox|
              \.coverage|
              htmlcov|
              \.cache|
              \.logs|
              results|
              samples|
              notebooks|
              website|
              docs/diagrams
          )$

  # Auto-fix common code quality issues
  - repo: local
    hooks:
      - id: samo-auto-fix-code-quality
        name: SAMO-DL Auto-Fix Code Quality
        entry: python scripts/maintenance/auto_fix_code_quality.py
        language: python
        types: [python]
        pass_filenames: false
        always_run: true
        stages: commit
        exclude: |
          (?x)^(
              \.git|
              \.venv|
              \.env|
              __pycache__|
              \.pytest_cache|
              \.mypy_cache|
              \.ruff_cache|
              build|
              dist|
              \.eggs|
              \.tox|
              \.coverage|
              htmlcov|
              \.cache|
              \.logs|
              results|
              samples|
              notebooks|
              website|
              docs/diagrams
          )$

# Global configuration
default_language_version:
  python: python3.8
