// SAMO-DL Prisma schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [vector]
}

model User {
  id                  String               @id @default(uuid()) @db.Uuid
  email               String               @unique
  passwordHash        String               @map("password_hash")
  createdAt           DateTime             @default(now()) @map("created_at") @db.Timestamptz
  updatedAt           DateTime             @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  consentVersion      String?              @map("consent_version")
  consentGivenAt      DateTime?            @map("consent_given_at") @db.Timestamptz
  dataRetentionPolicy String               @default("standard") @map("data_retention_policy")
  journalEntries      JournalEntry[]
  predictions         Prediction[]
  voiceTranscriptions VoiceTranscription[]

  @@map("users")
}

model JournalEntry {
  id               String      @id @default(uuid()) @db.Uuid
  userId           String      @map("user_id") @db.Uuid
  title            String?
  content          String
  encryptedContent Bytes?      @map("encrypted_content")
  createdAt        DateTime    @default(now()) @map("created_at") @db.Timestamptz
  updatedAt        DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  sentimentScore   Float?      @map("sentiment_score")
  moodCategory     String?     @map("mood_category")
  isPrivate        Boolean     @default(true) @map("is_private")
  user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  embeddings       Embedding[]
  tags             Tag[]       @relation("JournalEntryToTag")

  @@map("journal_entries")
}

model Embedding {
  id           String       @id @default(uuid()) @db.Uuid
  entryId      String       @map("entry_id") @db.Uuid
  modelVersion String       @map("model_version")
  embedding    Unsupported("vector(768)")
  createdAt    DateTime     @default(now()) @map("created_at") @db.Timestamptz
  journalEntry JournalEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)

  @@map("embeddings")
}

model Prediction {
  id              String   @id @default(uuid()) @db.Uuid
  userId          String   @map("user_id") @db.Uuid
  predictionType  String   @map("prediction_type")
  predictionContent Json     @map("prediction_content")
  confidenceScore Float?   @map("confidence_score")
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz
  isFeedbackGiven Boolean  @default(false) @map("is_feedback_given")
  feedbackRating  Int?     @map("feedback_rating")
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("predictions")
}

model VoiceTranscription {
  id                 String   @id @default(uuid()) @db.Uuid
  userId             String   @map("user_id") @db.Uuid
  audioFilePath      String?  @map("audio_file_path")
  transcriptText     String   @map("transcript_text")
  durationSeconds    Int?     @map("duration_seconds")
  createdAt          DateTime @default(now()) @map("created_at") @db.Timestamptz
  whisperModelVersion String?  @map("whisper_model_version")
  confidenceScore     Float?   @map("confidence_score")
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("voice_transcriptions")
}

model Tag {
  id        String         @id @default(uuid()) @db.Uuid
  name      String         @unique
  createdAt DateTime       @default(now()) @map("created_at") @db.Timestamptz
  entries   JournalEntry[] @relation("JournalEntryToTag")

  @@map("tags")
}
