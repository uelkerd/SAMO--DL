# ==============================================================================
# SAMO Deep Learning - Production Dockerfile
# Multi-stage build optimized for AI/ML workloads with PyTorch, Transformers, and FastAPI
# ==============================================================================

# Build stage
FROM python:3.12-slim as builder

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install build dependencies with version pinning for security
# Pin versions to avoid DOK-DL3008 and ensure reproducible builds
RUN apt-get update && apt-get install -y \
    build-essential \
    curl=7.88.1-10+deb12u12 \
    git \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN useradd --create-home --shell /bin/bash samo
USER samo
WORKDIR /app

# Copy requirements first for better caching
COPY --chown=samo:samo pyproject.toml environment.yml ./

# Install Python dependencies in build stage
RUN pip install --user . && \
    pip install --user torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu && \
    pip install --user transformers datasets accelerate

# Production stage
FROM python:3.12-slim as production

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONPATH=/app/src

# Install only runtime dependencies with version pinning for security
# Pin versions to avoid DOK-DL3008 and ensure reproducible builds
RUN apt-get update && apt-get install -y \
    curl=7.88.1-10+deb12u12 \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN useradd --create-home --shell /bin/bash samo
USER samo
WORKDIR /app

# Copy Python environment from builder stage
COPY --from=builder /home/samo/.local /home/samo/.local

# Copy application code
COPY --chown=samo:samo src/ ./src/
COPY --chown=samo:samo configs/ ./configs/

# Add local bin to PATH
ENV PATH="/home/samo/.local/bin:$PATH"

# Health check - improved to actually test the service
HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
    CMD curl --fail http://localhost:8000/health || exit 1

# Expose port
EXPOSE 8000

# Run the application
CMD ["python", "-m", "uvicorn", "src.unified_ai_api:app", "--host", "0.0.0.0", "--port", "8000"]
