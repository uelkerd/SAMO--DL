name: Code Quality Checks

on:
  push:
    branches: [ main, develop, feat/dl-* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  quality-check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: |
          pyproject.toml
          requirements-dev.txt

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Run Black (Code Formatting)
      run: black --check src/ tests/ scripts/

    - name: Run isort (Import Sorting)
      run: isort --check-only src/ tests/ scripts/

    - name: Run Flake8 (Linting)
      run: flake8 src/ tests/ scripts/

    - name: Run Pylint
      run: pylint src/ tests/ scripts/ || true
      continue-on-error: true

    - name: Run MyPy (Type Checking)
      run: mypy src/ tests/ scripts/

    - name: Run Bandit (Security)
      run: bandit -r src/ scripts/ -f json -o bandit-report.json

    - name: Run Safety (Vulnerability Check)
      run: safety check --json --output safety-report.json || true
      continue-on-error: true

    - name: Run Tests
      run: pytest tests/ --cov=src --cov-report=xml --cov-report=html --tb=short

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    - name: Archive test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          bandit-report.json
          safety-report.json
          coverage.xml
          htmlcov/
        retention-days: 30

  quality-gate:
    runs-on: ubuntu-latest
    needs: quality-check
    if: always()

    steps:
    - name: Quality Gate Check
      run: |
        if [ "${{ needs.quality-check.result }}" = "failure" ]; then
          echo "❌ Quality checks failed"
          exit 1
        else
          echo "✅ All quality checks passed"
        fi
