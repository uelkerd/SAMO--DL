# Production Dockerfile for Cloud Run deployment
# Uses the actual production architecture from PRs #136, #137, #138
FROM --platform=linux/amd64 python:3.10-slim-bookworm

# Set environment variables for Python
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONHASHSEED=random \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Set production environment variables
ENV FLASK_ENV=production \
    ENVIRONMENT=production \
    PORT=8080 \
    ADMIN_API_KEY=test-admin-key-123

# Set working directory
WORKDIR /app

# Install minimal system dependencies
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy production requirements
COPY deployment/cloud-run/requirements.txt .

# Install Python dependencies with CPU-only PyTorch (avoid CUDA downloads)
RUN pip install --no-cache-dir \
    --extra-index-url https://download.pytorch.org/whl/cpu \
    -r requirements.txt \
    torch==2.8.0+cpu

# Copy the actual production code from cloud-run directory
COPY deployment/cloud-run/secure_api_server.py .
COPY deployment/cloud-run/model_utils.py .
COPY deployment/cloud-run/security_headers.py .
COPY deployment/cloud-run/rate_limiter.py .
COPY deployment/docker/robust_predict.py .

# Create non-root user for security
RUN useradd -m -u 1000 appuser && \
    chown -R appuser:appuser /app
USER appuser

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Start the application with Gunicorn
CMD ["gunicorn", "--bind", "0.0.0.0:8080", "--workers", "2", "secure_api_server:app"] 