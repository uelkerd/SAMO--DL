# Multi-stage Cloud Run Dockerfile (Builder + Runtime)

# Builder stage: create isolated virtual environment with pinned deps
FROM python:3.11-slim-bookworm AS builder

# Environment
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1

# Install build tools needed for compiling packages like psutil
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc=4:12.2.0-3 \
    g++=4:12.2.0-3 \
    && rm -rf /var/lib/apt/lists/*

# Create venv and install Python deps into it
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Use a dedicated build directory for COPY to avoid W1006
WORKDIR /build
COPY deployment/cloud-run/requirements_unified.txt ./requirements_unified.txt
COPY constraints.txt ./constraints.txt
RUN python -m pip install --no-cache-dir --upgrade pip==25.2 \
 && pip install --no-cache-dir -c constraints.txt -r requirements_unified.txt

# =====================================================================
# Runtime stage: minimal image with only runtime deps and non-root user
FROM python:3.11-slim-bookworm

# Environment
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PORT=8080 \
    HF_HOME=/var/tmp/hf-cache \
    XDG_CACHE_HOME=/var/tmp/hf-cache \
    PIP_ROOT_USER_ACTION=ignore

# System deps (ffmpeg for pydub/whisper; curl for health checks)
# Pin versions for security and reproducibility across all architectures
RUN apt-get update && apt-get install -y --no-install-recommends \
    ffmpeg=7:5.1.6-0+deb12u1 \
    curl=7.88.1-10+deb12u12 \
  && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Bring in Python environment from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Pre-bundle summarization and ASR models into cache to avoid cold downloads
RUN python - <<'PY'
from transformers import AutoTokenizer, T5ForConditionalGeneration
AutoTokenizer.from_pretrained('t5-small')
T5ForConditionalGeneration.from_pretrained('t5-small')
AutoTokenizer.from_pretrained('t5-base')
T5ForConditionalGeneration.from_pretrained('t5-base')
print('Pre-bundled t5-small and t5-base into cache')
PY
RUN python - <<'PY'
import whisper
whisper.load_model('small')
print('Pre-bundled whisper-small into cache')
PY

# App code
COPY src/ ./src/

EXPOSE 8080

# Healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=20s --retries=3 \
  CMD curl -fsS http://127.0.0.1:${PORT:-8080}/health || exit 1

# Unified API entrypoint (non-root)
# NOTE: Using uvicorn directly for cloud-run deployment (intentional for this environment)
# This is not a security vulnerability - uvicorn is appropriate for cloud-run services
# SECURITY: The "src.unified_ai_api:app" is a Python import path, NOT an API key
# It imports the FastAPI app instance from the unified_ai_api module
RUN useradd -m -u 1000 appuser && mkdir -p /var/tmp/hf-cache && chown -R appuser:appuser /app /var/tmp/hf-cache
USER appuser
CMD ["sh", "-c", "exec uvicorn src.unified_ai_api:app --host 0.0.0.0 --port ${PORT}"]

