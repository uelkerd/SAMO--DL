# Minimal Working Deployment Dockerfile
# Uses known compatible PyTorch/transformers versions

# Build stage for compiling dependencies
FROM python:3.12-alpine3.20 as builder

# Install build dependencies
RUN apk add --no-cache build-base bash ca-certificates \
 && update-ca-certificates

# Set working directory
WORKDIR /app

# Copy requirements first for better caching
COPY requirements_minimal.txt .

# Install Python dependencies
RUN python -m pip install --no-cache-dir --upgrade pip==25.2 \
 && pip install --no-cache-dir -r requirements_minimal.txt

# Runtime stage
FROM python:3.12-alpine3.20

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PORT=8080

# Install runtime dependencies and glibc compat
RUN apk add --no-cache curl ca-certificates bash libc6-compat \
 && update-ca-certificates

# Copy Python packages from builder stage
COPY --from=builder /usr/local/lib/python3.12/site-packages /usr/local/lib/python3.12/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Set working directory
WORKDIR /app

# Copy application code
COPY minimal_api_server.py .
COPY security_headers.py .
COPY model_utils.py .
COPY docs_blueprint.py .
COPY templates/ ./templates/
COPY openapi.yaml .

# Create model directory and copy entire model
RUN mkdir -p /app/model
COPY model/ /app/model/

# Create non-root user for security
RUN adduser -D -s /bin/sh -h /home/app app \
 && chown -R app:app /app
USER app

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Start the application with Gunicorn for production
CMD ["gunicorn", "--bind", "0.0.0.0:8080", "--workers", "1", "--threads", "8", "--timeout", "0", "minimal_api_server:app"] 