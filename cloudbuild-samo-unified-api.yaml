steps:
  # Pull latest image for build caching (allow failure if image doesn't exist)
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        docker pull us-central1-docker.pkg.dev/$PROJECT_ID/samo-dl/samo-unified-api-optimized:latest || exit 0

  # Build the Docker image with dynamic tag and caching
  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'build',
      '--cache-from', 'us-central1-docker.pkg.dev/$PROJECT_ID/samo-dl/samo-unified-api-optimized:latest',
      '-f', 'Dockerfile.optimized',
      '-t', 'us-central1-docker.pkg.dev/$PROJECT_ID/samo-dl/samo-unified-api-optimized:$BUILD_ID',
      '-t', 'us-central1-docker.pkg.dev/$PROJECT_ID/samo-dl/samo-unified-api-optimized:latest',
      '.'
    ]

  # Scan locally built image for vulnerabilities (no --remote flag)
  - name: 'gcr.io/cloud-builders/gcloud'
    args: [
      'artifacts', 'docker', 'images', 'scan',
      'us-central1-docker.pkg.dev/$PROJECT_ID/samo-dl/samo-unified-api-optimized:$BUILD_ID'
    ]

  # Push images to registry
  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'push',
      'us-central1-docker.pkg.dev/$PROJECT_ID/samo-dl/samo-unified-api-optimized:$BUILD_ID'
    ]

  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'push',
      'us-central1-docker.pkg.dev/$PROJECT_ID/samo-dl/samo-unified-api-optimized:latest'
    ]

  # Deploy to Cloud Run with optimized configuration
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args: [
      'run', 'deploy', 'samo-unified-api-optimized',
      '--image', 'us-central1-docker.pkg.dev/$PROJECT_ID/samo-dl/samo-unified-api-optimized:$BUILD_ID',
      '--region', 'us-central1',
      '--platform', 'managed',
      '--allow-unauthenticated',
      '--port', '8080',
      '--memory', '6Gi',
      '--cpu', '2',
      '--max-instances', '10',
      '--min-instances', '0',
      '--concurrency', '80',
      '--startup-cpu-boost',
      '--service-timeout', '3600',
      '--timeout', '1200',
      '--set-env-vars', 'PYTHONUNBUFFERED=1,CORS_ORIGINS=https://samo-dl-demo.web.app,https://samo-dl-demo.firebaseapp.com'
    ]
    secretEnv: ['SAMO_EMOTION_API_KEY']

# Images to be pushed to registry
images:
  - 'us-central1-docker.pkg.dev/$PROJECT_ID/samo-dl/samo-unified-api-optimized:$BUILD_ID'
  - 'us-central1-docker.pkg.dev/$PROJECT_ID/samo-dl/samo-unified-api-optimized:latest'

# Build options for optimal performance
options:
  machineType: 'E2_HIGHCPU_8'
  diskSizeGb: '100'
  logging: CLOUD_LOGGING_ONLY

# Secret management
availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/SAMO_EMOTION_API_KEY/versions/latest
      env: 'SAMO_EMOTION_API_KEY'