version: 2.1

# ============================================================================
# SAMO Deep Learning - Simplified CI/CD Pipeline
# Focus: Simple > Complex, keep CI green and fast
# ============================================================================

executors:
  python-simple:
    docker:
      - image: cimg/python:3.12
    resource_class: medium
    working_directory: ~/samo-dl
    environment:
      PYTHONPATH: $CIRCLE_WORKING_DIRECTORY/src

commands:
  smoke_health:
    description: "Run container and poll a health endpoint with retry"
    parameters:
      image:
        type: string
      container_name:
        type: string
      port:
        type: string
        default: "8080"
      host_port:
        type: string
        default: "18080"
      path:
        type: string
        default: "/health"
    steps:
      - run:
          name: Smoke test << parameters.container_name >>
          command: |
            set -euo pipefail
            cleanup() { docker rm -f << parameters.container_name >> >/dev/null 2>&1 || true; }
            trap cleanup EXIT
            docker run -d --rm -p << parameters.host_port >>:<< parameters.port >> --name << parameters.container_name >> << parameters.image >>

            # Wait for container to be fully ready
            echo "‚è≥ Waiting for container to start..."
            sleep 5

            HEALTH_PATH="<< parameters.path >>"
            case "$HEALTH_PATH" in
              /*) ;;
              *) HEALTH_PATH="/$HEALTH_PATH" ;;
            esac

            echo "üîç Starting health check on port << parameters.host_port >> (maps to container port << parameters.port >>)"
            for i in $(seq 1 30); do
              if curl -fsS --connect-timeout 2 --max-time 4 "http://127.0.0.1:<< parameters.host_port >>${HEALTH_PATH}" >/dev/null; then
                echo "‚úÖ Health check passed"
                trap - EXIT
                cleanup
                exit 0
              fi
              echo "‚è≥ Health check attempt $i/30 - waiting..."
              sleep 1
            done
            echo "‚ùå Health check failed after 30 seconds"
            docker logs << parameters.container_name >> || true
            exit 1

jobs:
  # Simple health check to validate basic setup
  basic-setup:
    executor: python-simple
    steps:
      - checkout
      - run:
          name: Environment Check
          command: |
            echo "Python version: $(python3 --version)"
            echo "Pip version: $(python3 -m pip --version)"
            echo "Working directory: $(pwd)"
            echo "PYTHONPATH: $PYTHONPATH"
      - run:
          name: Upgrade pip for faster resolver
          command: |
            python3 -m pip install --upgrade pip
      - run:
          name: Install Core Dev Dependencies (optimized)
          command: |
            # Install with optimized flags to prevent timeout
            python3 -m pip install \
              --no-compile \
              --disable-pip-version-check \
              --timeout 300 \
              -r dependencies/requirements-api.txt \
              -r dependencies/requirements-dev.txt
            # Sanity check to fail fast if imports break
            PYTHONPATH="$CIRCLE_WORKING_DIRECTORY/src" python3 -c "import sys; import fastapi, uvicorn, pydantic, requests; print('‚úÖ core imports OK')" || echo "‚ùå Import failed"
      - run:
          name: Test Basic API Import
          command: |
            export PATH="$HOME/.local/bin:$PATH"
            PYTHONPATH="$CIRCLE_WORKING_DIRECTORY/src" python3 -c "from src.unified_ai_api import app; print('‚úÖ API imports successfully!')"
      - run:
          name: Test API Health Check
          command: |
            export PATH="$HOME/.local/bin:$PATH"
            PYTHONPATH="$CIRCLE_WORKING_DIRECTORY/src" python3 -c "import importlib.util as u, sys; sys.exit(0 if u.find_spec('fastapi') is None else 1)" \
              && echo '‚ö†Ô∏è FastAPI not installed; skipping health check.' \
              || PYTHONPATH="$CIRCLE_WORKING_DIRECTORY/src" python3 -c "from fastapi.testclient import TestClient; from src.unified_ai_api import app; c=TestClient(app); r=c.get('/health'); assert r.status_code==200, f'Health check failed: {r.status_code}'; print('‚úÖ API health check passed!')"

  safety-scan:
    executor: python-simple
    steps:
      - checkout
      - run:
          name: Install safety
          command: |
            python3 -m pip install --upgrade pip
            python3 -m pip install safety==3.2.3
      - run:
          name: Run safety scan with constraints (fail on high/critical)
          command: |
            set -e
            echo "üîç Scanning all canonical requirements with constraints"
            # Create temporary virtual environment
            python3 -m venv /tmp/safety-scan-env
            source /tmp/safety-scan-env/bin/activate
            
            # Install dependencies with constraints
            pip install --upgrade pip
            pip install -c dependencies/constraints.txt -r dependencies/requirements-api.txt -r dependencies/requirements-dev.txt -r dependencies/requirements-ml.txt
            
            # Install safety in the virtual environment
            pip install safety==3.2.3
            
            # Run safety check against installed environment (captures transitives)
            python3 -m safety check --full-report --fail-on HIGH
            
            # Cleanup
            deactivate
            rm -rf /tmp/safety-scan-env

  # Basic linting (optional - won't fail build)
  code-quality:
    executor: python-simple
    steps:
      - checkout
      - run:
          name: Install Linting Tools
          command: |
            python3 -m pip install --upgrade pip
            python3 -m pip install --user ruff==0.6.9
      - run:
          name: Run Linting (Non-blocking)
          command: |
            export PATH="$HOME/.local/bin:$PATH"
            ruff check src/ || echo "‚ö†Ô∏è Linting issues found (non-blocking)"
            ruff format --check src/ || echo "‚ö†Ô∏è Formatting issues found (non-blocking)"

  # Simple unit tests (placeholder)
  unit-tests:
    executor: python-simple
    steps:
      - checkout
      - run:
          name: Install Test Dependencies (optimized)
          command: |
            python3 -m pip install --upgrade pip
            # Install with optimized flags to prevent timeout
            python3 -m pip install \
              --no-compile \
              --disable-pip-version-check \
              --timeout 300 \
              -r dependencies/requirements-api.txt \
              -r dependencies/requirements-dev.txt \
              -r dependencies/requirements-ml.txt
            python3 -c "import sys; import pytest, ruff, torch, transformers, pandas; print('‚úÖ test deps imports OK')" || echo "‚ùå Import failed"
      - run:
          name: Run Basic Tests
          command: |
            export PATH="$HOME/.local/bin:$PATH"
            PYTHONPATH="$CIRCLE_WORKING_DIRECTORY/src" python3 -m pytest --version
            echo "‚úÖ Test framework ready"
  docker-build:
    docker:
      - image: cimg/base:stable
    resource_class: medium
    working_directory: ~/samo-dl
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Verify Docker and print version
          command: |
            docker --version
      - run:
          name: Build app image (minimal)
          command: |
            DOCKER_BUILDKIT=1 docker build \
              --build-arg BUILD_TYPE=minimal \
              --pull \
              --progress=plain \
              --platform linux/amd64 \
              --build-arg PIP_CONSTRAINT=dependencies/constraints.txt \
              -f deployment/docker/Dockerfile.app \
              -t samo-dl-app:${CIRCLE_SHA1:0:7} \
              -t samo-dl-app:latest \
              .
      - smoke_health:
          image: samo-dl-app:${CIRCLE_SHA1:0:7}
          container_name: app-minimal-test
      - run:
          name: Build app image (unified ML)
          command: |
            DOCKER_BUILDKIT=1 docker build \
              --build-arg BUILD_TYPE=unified \
              --build-arg INCLUDE_ML=true \
              --pull \
              --progress=plain \
              --platform linux/amd64 \
              --build-arg PIP_CONSTRAINT=dependencies/constraints.txt \
              -f deployment/docker/Dockerfile.app \
              -t samo-dl-app-unified:${CIRCLE_SHA1:0:7} \
              -t samo-dl-app-unified:latest \
              .
      - smoke_health:
          image: samo-dl-app-unified:${CIRCLE_SHA1:0:7}
          container_name: app-unified-test
      - run:
          name: Build training image
          command: |
            DOCKER_BUILDKIT=1 docker build \
              --pull \
              --progress=plain \
              -f deployment/docker/Dockerfile.train \
              -t samo-dl-train:${CIRCLE_SHA1:0:7} \
              -t samo-dl-train:latest \
              .
      - run:
          name: Smoke test training image (imports)
          command: |
            docker run --rm --entrypoint python samo-dl-train:${CIRCLE_SHA1:0:7} -c "import torch, transformers; print('‚úÖ train image imports OK')"

  safety-scan-live:
    executor: python-simple
    steps:
      - checkout
      - run:
          name: Install dependencies under constraints (API + dev)
          command: |
            python3 -m pip install --upgrade pip
            python3 -m pip install \
              --no-compile \
              --disable-pip-version-check \
              --timeout 300 \
              -c dependencies/constraints.txt \
              -r dependencies/requirements-api.txt \
              -r dependencies/requirements-dev.txt
      - run:
          name: Install safety and scan live environment
          command: |
            python3 -m pip install safety==3.2.3
            # Scan the installed environment for transitives as resolved under constraints.
            safety check --full-report --fail-on HIGH

workflows:
  simple-ci:
    jobs:
      - basic-setup
      - safety-scan:
          requires:
            - basic-setup
      - safety-scan-live:
          requires:
            - safety-scan
      - code-quality:
          requires:
            - basic-setup
      - unit-tests:
          requires:
            - basic-setup
      - docker-build:
          requires:
            - basic-setup

  quick-check:
    jobs:
      - basic-setup:
          filters:
            branches:
              only:
                - /^bootstrap-only\/.*/
