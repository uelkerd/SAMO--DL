version: 2.1

# ============================================================================
# SAMO Deep Learning - Simplified CI/CD Pipeline
# Focus: Simple > Complex, keep CI green and fast
# ============================================================================

executors:
  python-simple:
    docker:
      - image: cimg/python:3.13
    resource_class: medium
    working_directory: ~/samo-dl
    environment:
      PYTHONPATH: $CIRCLE_WORKING_DIRECTORY/src

jobs:
  # Simple health check to validate basic setup
  basic-setup:
    executor: python-simple
    steps:
      - checkout
      - run:
          name: Environment Check
          command: |
            echo "Python version: $(python3 --version)"
            echo "Pip version: $(python3 -m pip --version)"
            echo "Working directory: $(pwd)"
            echo "PYTHONPATH: $PYTHONPATH"
      - run:
          name: Upgrade pip for faster resolver
          command: |
            python3 -m pip install --upgrade pip
      - run:
          name: Install Core Dev Dependencies (optimized)
          command: |
            # Install with optimized flags to prevent timeout
            python3 -m pip install \
              --only-binary=:all: \
              --no-compile \
              --disable-pip-version-check \
              --timeout 300 \
              --constraint constraints.txt \
              -r requirements-api.txt \
              -r requirements-dev.txt
            # Sanity check to fail fast if imports break
            python3 -c "
import sys
try:
    import fastapi, uvicorn, pydantic, requests
    print('✅ core imports OK')
except ImportError as e:
    print(f'❌ Import failed: {e}')
    sys.exit(1)
"
      - run:
          name: Test Basic API Import
          command: |
            export PATH="$HOME/.local/bin:$PATH"
            python3 -c "from src.unified_ai_api import app; print('✅ API imports successfully!')"
      - run:
          name: Test API Health Check
          command: |
            export PATH="$HOME/.local/bin:$PATH"
            python3 -c "import importlib.util as u, sys; sys.exit(0 if u.find_spec('fastapi') is None else 1)" \
              && echo '⚠️ FastAPI not installed; skipping health check.' \
              || python3 -c "from fastapi.testclient import TestClient; from src.unified_ai_api import app; c=TestClient(app); r=c.get('/health'); assert r.status_code==200, f'Health check failed: {r.status_code}'; print('✅ API health check passed!')"

  # Basic linting (optional - won't fail build)
  code-quality:
    executor: python-simple
    steps:
      - checkout
      - run:
          name: Install Linting Tools
          command: |
            python3 -m pip install --upgrade pip
            python3 -m pip install --user ruff==0.6.9
      - run:
          name: Run Linting (Non-blocking)
          command: |
            export PATH="$HOME/.local/bin:$PATH"
            ruff check src/ || echo "⚠️ Linting issues found (non-blocking)"
            ruff format --check src/ || echo "⚠️ Formatting issues found (non-blocking)"

  # Simple unit tests (placeholder)
  unit-tests:
    executor: python-simple
    steps:
      - checkout
      - run:
          name: Install Test Dependencies (optimized)
          command: |
            python3 -m pip install --upgrade pip
            # Install with optimized flags to prevent timeout
            python3 -m pip install \
              --only-binary=:all: \
              --no-compile \
              --disable-pip-version-check \
              --timeout 300 \
              --constraint constraints.txt \
              -r requirements-api.txt \
              -r requirements-dev.txt
            python3 -c "
import sys
try:
    import pytest, ruff
    print('✅ test deps imports OK')
except ImportError as e:
    print(f'❌ Import failed: {e}')
    sys.exit(1)
"
      - run:
          name: Run Basic Tests
          command: |
            export PATH="$HOME/.local/bin:$PATH"
            python3 -m pytest --version
            echo "✅ Test framework ready"

workflows:
  simple-ci:
    jobs:
      - basic-setup
      - code-quality:
          requires:
            - basic-setup
      - unit-tests:
          requires:
            - basic-setup

  quick-check:
    jobs:
      - basic-setup:
          filters:
            branches:
              only:
                - /^bootstrap-only\/.*/
