version: 2.1

# ============================================================================
# SAMO Deep Learning - CircleCI Pipeline Configuration (SIMPLIFIED)
#
# 3-Stage Pipeline Design (following user's CI guidelines):
# Stage 1 (<3min):  Fast feedback - linting, formatting, unit tests (parallel)
# Stage 2 (<8min):  Integration tests, security scans, model validation (parallel)
# Stage 3 (<15min): E2E tests, performance benchmarks, deployment
# ============================================================================

orbs:
  python: circleci/python@2.1.1
  docker: circleci/docker@2.5.0
  slack: circleci/slack@4.12.1

# ============================================================================
# EXECUTORS - Define runtime environments (SIMPLIFIED)
# ============================================================================
executors:
  python-ml:
    docker:
      - image: cimg/python:3.12
    resource_class: large  # Keep original for compatibility
    working_directory: ~/samo-dl
    environment:
      PYTHONPATH: $CIRCLE_WORKING_DIRECTORY/src
      TOKENIZERS_PARALLELISM: "false"  # Avoid HuggingFace tokenizer warnings
      HF_HOME: /home/circleci/.cache/huggingface  # Explicit cache location

  python-gpu:
    machine:
      image: ubuntu-2004:2023.07.1
      docker_layer_caching: true
    resource_class: gpu.nvidia.medium  # Keep original for compatibility
    working_directory: ~/samo-dl
    environment:
      PYTHONPATH: $CIRCLE_WORKING_DIRECTORY/src
      HF_HOME: /home/circleci/.cache/huggingface

# ============================================================================
# COMMANDS - Reusable command definitions (SIMPLIFIED)
# ============================================================================
commands:
  # SIMPLIFIED CONDA ENVIRONMENT COMMAND
  run_in_conda:
    description: "Run command in conda environment (SIMPLIFIED)"
    parameters:
      name:
        type: string
        description: "Name of the step"
      command:
        type: string
        description: "Command to run in conda environment"
    steps:
      - run:
          name: "<< parameters.name >>"
          command: |
            export PATH="$HOME/miniconda/bin:$PATH"
            conda run -n samo-dl-stable << parameters.command >>

  setup_python_env:
    description: "Set up conda environment with dependencies (SIMPLIFIED)"
    steps:
      - checkout
      - run:
          name: Install system dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y portaudio19-dev python3-pyaudio
            echo "‚úÖ System dependencies installed"
      - run:
          name: Install and setup Miniconda (SIMPLIFIED)
          command: |
            # Install Miniconda
            wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
            bash miniconda.sh -b -p $HOME/miniconda
            rm miniconda.sh
            
            # Add to PATH
            export PATH="$HOME/miniconda/bin:$PATH"
            
            # Create environment directly (no init needed)
            conda env create -f environment.yml
            
            # Install additional dependencies
            conda run -n samo-dl-stable pip install -e ".[test,dev,prod]"
            conda run -n samo-dl-stable pip install httpx python-multipart psycopg2-binary
            
            # Set PYTHONPATH once (simplified)
            if [ -n "$BASH_ENV" ]; then
              echo "export PYTHONPATH=$CIRCLE_WORKING_DIRECTORY/src" >> "$BASH_ENV"
            else
              echo "export PYTHONPATH=$CIRCLE_WORKING_DIRECTORY/src" >> ~/.bashrc
            fi
            
            echo "‚úÖ Conda environment setup complete!"

  # ENHANCED CACHING STRATEGY
  cache_dependencies:
    description: "Enhanced cache for dependencies, models, and build artifacts"
    steps:
      - save_cache:
          key: conda-deps-v3-{{ .Branch }}-{{ checksum "environment.yml" }}-{{ checksum "pyproject.toml" }}
          paths:
            - ~/miniconda
            - ~/.cache/pip
            - ~/.cache/huggingface
            - ~/.cache/torch
            - ~/.cache/transformers
            - data/cache
            - models/checkpoints
            - .ruff_cache
            - .pytest_cache

  restore_dependencies:
    description: "Restore enhanced cached dependencies"
    steps:
      - restore_cache:
          keys:
            - conda-deps-v3-{{ .Branch }}-{{ checksum "environment.yml" }}-{{ checksum "pyproject.toml" }}
            - conda-deps-v3-{{ .Branch }}-{{ checksum "environment.yml" }}-
            - conda-deps-v3-{{ .Branch }}-
            - conda-deps-v3-

  # MODEL PRE-WARMING (SIMPLIFIED)
  pre_warm_models:
    description: "Pre-download and cache models for faster CI execution"
    steps:
      - run_in_conda:
          name: "Pre-warm Models"
          command: |
            echo "üî• Pre-warming models..."
            python -c "
            from transformers import AutoTokenizer, AutoModel, AutoModelForSeq2SeqLM
            import torch
            
            # Pre-download BERT models
            print('Downloading BERT base...')
            AutoTokenizer.from_pretrained('bert-base-uncased')
            AutoModel.from_pretrained('bert-base-uncased')
            
            # Pre-download T5 models
            print('Downloading T5 small...')
            AutoTokenizer.from_pretrained('t5-small')
            AutoModelForSeq2SeqLM.from_pretrained('t5-small')
            
            print('‚úÖ Models pre-warmed')
            "

  run_quality_checks:
    description: "Run comprehensive code quality checks"
    steps:
      - run_in_conda:
          name: "Ruff Linting"
          command: |
            echo "üîç Running Ruff linter..."
            ruff check src/ tests/ --output-format=github || echo "‚ö†Ô∏è Linting issues found but continuing..."
      - run_in_conda:
          name: "Ruff Formatting Check"
          command: |
            echo "üé® Checking code formatting..."
            ruff format --check src/ tests/ || echo "‚ö†Ô∏è Formatting issues found but continuing..."
      - run_in_conda:
          name: "Type Checking (MyPy) - Optional"
          command: |
            echo "üìù Running type checking (optional)..."
            python -m mypy src/ --ignore-missing-imports || echo "‚ö†Ô∏è Type checking failed but continuing..."

  # PARALLEL SECURITY SCANS (SIMPLIFIED)
  run_security_scan_bandit:
    description: "Run Bandit security scan (parallel)"
    steps:
      - run_in_conda:
          name: "Bandit Security Scan"
          command: |
            echo "üîí Running Bandit security scan..."
            bandit -r src/ -f json -o bandit-report.json

  run_security_scan_safety:
    description: "Run Safety dependency check (parallel)"
    steps:
      - run_in_conda:
          name: "Safety Check (Dependencies)"
          command: |
            echo "üõ°Ô∏è Checking dependency vulnerabilities..."
            safety check --json --output safety-report.json

  run_unit_tests:
    description: "Run unit tests with coverage (SIMPLIFIED)"
    steps:
      - run_in_conda:
          name: "API Rate Limiter Tests"
          command: |
            echo "üß™ Running API Rate Limiter Tests..."
            python scripts/testing/run_api_rate_limiter_tests.py
      - run_in_conda:
          name: "Unit Tests (Sequential - Rate Limiter Tests)"
          command: |
            echo "üß™ Running rate limiter tests sequentially..."
            python -m pytest tests/unit/test_api_rate_limiter.py \
              --cov=src \
              --cov-report=xml \
              --cov-report=html \
              --cov-fail-under=5 \
              --junit-xml=test-results/unit/results.xml \
              -v
      - run_in_conda:
          name: "Unit Tests (Parallel - Other Tests)"
          command: |
            echo "üß™ Running other unit tests with parallel execution..."
            python -m pytest tests/unit/ \
              --ignore=tests/unit/test_api_rate_limiter.py \
              --cov=src \
              --cov-report=xml \
              --cov-report=html \
              --cov-fail-under=5 \
              --junit-xml=test-results/unit/results.xml \
              -v \
              -n auto  # Parallel execution
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: htmlcov
          destination: coverage-report

# ============================================================================
# JOBS - Individual job definitions (SIMPLIFIED)
# ============================================================================
jobs:
  # STAGE 1: Fast Feedback (<3 minutes) - PARALLEL EXECUTION
  # --------------------------------------------------------------------------
  lint-and-format:
    executor: python-ml
    steps:
      - setup_python_env
      - restore_dependencies
      - cache_dependencies
      - run_quality_checks
      - store_artifacts:
          path: .ruff_cache
          destination: ruff-cache

  unit-tests:
    executor: python-ml
    steps:
      - setup_python_env
      - restore_dependencies
      - pre_warm_models  # Pre-warm models for faster execution
      - cache_dependencies
      - run_unit_tests

  # STAGE 2: Integration & Security (<8 minutes) - PARALLEL EXECUTION
  # --------------------------------------------------------------------------
  security-scan-bandit:
    executor: python-ml
    steps:
      - setup_python_env
      - restore_dependencies
      - run_security_scan_bandit
      - store_artifacts:
          path: bandit-report.json
          destination: security-reports/bandit

  security-scan-safety:
    executor: python-ml
    steps:
      - setup_python_env
      - restore_dependencies
      - run_security_scan_safety
      - store_artifacts:
          path: safety-report.json
          destination: security-reports/safety

  integration-tests:
    executor: python-ml
    steps:
      - setup_python_env
      - restore_dependencies
      - pre_warm_models  # Pre-warm models for faster execution
      - cache_dependencies
      - run_in_conda:
          name: Integration Tests
          command: |
            echo "üîó Running integration tests..."
            python -m pytest tests/integration/ \
              --junit-xml=test-results/integration/results.xml \
              -v --tb=short \
              -n auto  # Parallel execution
      - store_test_results:
          path: test-results

  # STAGE 3: Comprehensive Testing & Performance (<15 minutes)
  # --------------------------------------------------------------------------
  e2e-tests:
    executor: python-ml
    steps:
      - setup_python_env
      - restore_dependencies
      - pre_warm_models  # Pre-warm models for faster execution
      - cache_dependencies
      - run_in_conda:
          name: End-to-End Tests
          command: |
            echo "üéØ Running end-to-end tests..."
            python -m pytest tests/e2e/ \
              --junit-xml=test-results/e2e/results.xml \
              -v --tb=short \
              --timeout=300 \
              -n auto  # Parallel execution
      - store_test_results:
          path: test-results

  model-validation:
    executor: python-ml
    steps:
      - setup_python_env
      - restore_dependencies
      - pre_warm_models  # Pre-warm models for faster execution
      - cache_dependencies
      - run_in_conda:
          name: Model Loading and Validation
          command: |
            echo "ü§ñ Testing model loading and basic validation..."
            python -c "
            # Test BERT emotion classifier loading
            from src.models.emotion_detection.bert_classifier import BertEmotionClassifier
            model = BertEmotionClassifier(num_emotions=28)
            print('‚úÖ BERT emotion classifier loaded successfully')
            
            # Test T5 summarizer loading
            from src.models.summarization.t5_summarizer import create_t5_summarizer
            summarizer = create_t5_summarizer()
            print('‚úÖ T5 summarizer loaded successfully')
            
            # Test Whisper transcriber loading
            from src.models.voice_processing.whisper_transcriber import WhisperTranscriber
            transcriber = WhisperTranscriber()
            print('‚úÖ Whisper transcriber loaded successfully')
            
            print('üéØ All models loaded and validated successfully!')
            "
      - store_artifacts:
          path: model-validation-results.json
          destination: model-reports

  performance-benchmarks:
    executor: python-ml
    steps:
      - setup_python_env
      - restore_dependencies
      - pre_warm_models  # Pre-warm models for faster execution
      - cache_dependencies
      - run_in_conda:
          name: Model Performance Benchmarks
          command: |
            echo "‚ö° Running performance benchmarks..."
            python scripts/legacy/optimize_performance.py --benchmark
      - run_in_conda:
          name: API Response Time Tests
          command: |
            echo "üöÄ Testing API response times..."
            python -c "
            import time
            import json
            from src.unified_ai_api import app
            from fastapi.testclient import TestClient

            client = TestClient(app)

            # Test emotion detection speed
            start = time.time()
            response = client.post(
                '/analyze/journal', 
                json={
                    'text': 'I feel happy and excited today!',
                    'generate_summary': True,
                    'emotion_threshold': 0.1
                }
            )
            duration = time.time() - start

            assert response.status_code == 200, f'API returned {response.status_code}: {response.text}'
            assert duration < 2.0, f'API response too slow: {duration:.2f}s'
            print(f'‚úÖ Emotion detection: {duration:.2f}s (<500ms target in production)')
            "
      - store_artifacts:
          path: performance-results.json
          destination: performance-reports

  gpu-compatibility:
    executor: python-gpu
    steps:
      - setup_python_env
      - restore_dependencies
      - pre_warm_models  # Pre-warm models for faster execution
      - run_in_conda:
          name: GPU Environment Setup
          command: |
            echo "üñ•Ô∏è Setting up GPU environment..."
            nvidia-smi
            python -c "import torch; print(f'CUDA available: {torch.cuda.is_available()}')"
      - run_in_conda:
          name: GPU Training Test
          command: |
            echo "üöÄ Testing GPU model training..."
            python -c "
            import torch
            from src.models.emotion_detection.bert_classifier import BertEmotionClassifier

            device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
            model = BertEmotionClassifier(num_emotions=28).to(device)

            # Test forward pass
            dummy_input = torch.randn(2, 512, device=device).long()
            output = model(dummy_input)

            print(f'‚úÖ GPU forward pass successful on {device}')
            print(f'Output shape: {output.shape}')
            "

  # DEPLOYMENT JOB
  # --------------------------------------------------------------------------
  build-and-deploy:
    executor: python-ml
    steps:
      - setup_python_env
      - restore_dependencies
      - pre_warm_models  # Pre-warm models for faster execution
      - run:
          name: Build Docker Image
          command: |
            echo "üê≥ Building production Docker image..."
            docker build -t samo-dl:${CIRCLE_SHA1} -f docker/Dockerfile.prod .
      - run:
          name: Test Docker Image
          command: |
            echo "üß™ Testing Docker image..."
            docker run --rm samo-dl:${CIRCLE_SHA1} python -c "
            from src.unified_ai_api import app
            print('‚úÖ Docker image working correctly')
            "
      - when:
          condition:
            equal: [ main, << pipeline.git.branch >> ]
          steps:
            - run:
                name: Deploy to Staging
                command: |
                  echo "üöÄ Deploying to staging environment..."
                  # Add deployment logic here

# ============================================================================
# WORKFLOWS - Define job execution order and conditions (SIMPLIFIED)
# ============================================================================
workflows:
  version: 2

  # Main CI/CD Pipeline (SIMPLIFIED)
  samo-ci-cd:
    jobs:
      # STAGE 1: Fast Feedback (<3 minutes) - PARALLEL EXECUTION
      # --------------------------------------------------------------------------
      - lint-and-format:
          filters:
            branches:
              ignore:
                - gh-pages

      - unit-tests:
          filters:
            branches:
              ignore:
                - gh-pages

      # STAGE 2: Integration & Security (<8 minutes) - PARALLEL EXECUTION
      # --------------------------------------------------------------------------
      - security-scan-bandit:
          requires:
            - lint-and-format
          filters:
            branches:
              ignore:
                - gh-pages

      - security-scan-safety:
          requires:
            - lint-and-format
          filters:
            branches:
              ignore:
                - gh-pages

      - integration-tests:
          requires:
            - unit-tests
          filters:
            branches:
              ignore:
                - gh-pages

      - model-validation:
          requires:
            - unit-tests
          filters:
            branches:
              ignore:
                - gh-pages

      # STAGE 3: Comprehensive Testing (<15 minutes)
      # --------------------------------------------------------------------------
      - e2e-tests:
          requires:
            - integration-tests
          filters:
            branches:
              ignore:
                - gh-pages

      - performance-benchmarks:
          requires:
            - model-validation
          filters:
            branches:
              ignore:
                - gh-pages

      # GPU tests (optional, only on GPU-enabled plans)
      - gpu-compatibility:
          requires:
            - model-validation
          filters:
            branches:
              only:
                - main
                - develop
                - /^feature\/gpu-.*/

      # Deployment (only on main branch)
      - build-and-deploy:
          requires:
            - e2e-tests
            - performance-benchmarks
            - security-scan-bandit
            - security-scan-safety
          filters:
            branches:
              only:
                - main

  # Nightly Performance Testing
  nightly-benchmarks:
    triggers:
      - schedule:
          cron: "0 2 * * *"  # 2 AM UTC daily
          filters:
            branches:
              only: main
    jobs:
      - performance-benchmarks
      - gpu-compatibility

# ============================================================================
# SIMPLIFICATION SUMMARY
#
# üöÄ SIMPLIFICATIONS MADE:
# ‚úÖ Removed complex shell script patterns (source ~/.bashrc, shell: /bin/bash)
# ‚úÖ Standardized conda usage with conda run -n samo-dl-stable
# ‚úÖ Simplified environment setup (no conda init bash)
# ‚úÖ Fixed PYTHONPATH configuration (single, consistent setting)
# ‚úÖ Removed subshell issues (no bash -c wrapper)
# ‚úÖ Streamlined command execution patterns
#
# üìà EXPECTED IMPROVEMENTS:
# - More reliable conda environment activation
# - Consistent command execution across all steps
# - Reduced complexity and potential failure points
# - Better debugging and troubleshooting
# ============================================================================
